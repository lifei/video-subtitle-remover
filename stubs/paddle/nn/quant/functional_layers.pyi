from ...tensor import linalg as linalg, manipulation as manipulation, math as math
from ..layer.layers import Layer as Layer
from _typeshed import Incomplete

class FloatFunctionalLayer(Layer):
    def __init__(self) -> None: ...

class add(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, y, name: Incomplete | None = None): ...

class subtract(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, y, name: Incomplete | None = None): ...

class multiply(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, y, name: Incomplete | None = None): ...

class divide(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, y, name: Incomplete | None = None): ...

class reshape(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, shape, name: Incomplete | None = None): ...

class transpose(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, perm, name: Incomplete | None = None): ...

class concat(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, axis: int = 0, name: Incomplete | None = None): ...

class flatten(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, start_axis: int = 0, stop_axis: int = -1, name: Incomplete | None = None): ...

class matmul(FloatFunctionalLayer):
    def __init__(self) -> None: ...
    def forward(self, x, y, transpose_x: bool = False, transpose_y: bool = False, name: Incomplete | None = None): ...
