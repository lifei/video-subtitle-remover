import abc
from ..layer.layers import Layer as Layer
from _typeshed import Incomplete
from paddle.framework import in_dynamic_mode as in_dynamic_mode

class LinearQuanterDequanter(Layer):
    def __init__(self, quanter, dequanter) -> None: ...
    def forward(self, input): ...
    @staticmethod
    def from_quanter(quanter): ...

class LinearQuanter(Layer):
    def __init__(self, scales, zero_point: Incomplete | None = None, quant_axis: Incomplete | None = None, bit_length: int = 8, group_size: int = 128) -> None: ...
    def forward(self, input): ...
    @staticmethod
    def from_quanter(quanter): ...

class LinearDequanter(Layer):
    def __init__(self, scales, zero_point: Incomplete | None = None, quant_axis: Incomplete | None = None, bit_length: int = 8, group_size: int = 128) -> None: ...
    def forward(self, input): ...
    @staticmethod
    def from_quanter(quanter): ...

class ConvertibleQuantedLayer(Layer, metaclass=abc.ABCMeta):
    converted: bool
    def __init__(self) -> None: ...
    @abc.abstractmethod
    def weights_to_quanters(self) -> list[tuple[str, str]]: ...
    @abc.abstractmethod
    def activation_quanters(self) -> list[str]: ...
