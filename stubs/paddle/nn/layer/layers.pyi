from _typeshed import Incomplete
from collections.abc import Generator
from paddle import nn as nn, profiler as profiler
from paddle.base import core as core, framework as framework, unique_name as unique_name
from paddle.base.core import VarDesc as VarDesc
from paddle.base.dygraph import no_grad as no_grad
from paddle.base.dygraph.base import in_declarative_mode as in_declarative_mode, in_to_static_mode as in_to_static_mode, program_desc_tracing_guard as program_desc_tracing_guard
from paddle.base.executor import Executor as Executor, global_scope as global_scope
from paddle.base.framework import Parameter as Parameter, Program as Program, convert_np_dtype_to_dtype_ as convert_np_dtype_to_dtype_, default_main_program as default_main_program, in_dygraph_mode as in_dygraph_mode
from paddle.base.layer_helper_base import LayerHelperBase as LayerHelperBase
from paddle.base.param_attr import ParamAttr as ParamAttr
from paddle.profiler.utils import in_profiler_mode as in_profiler_mode
from paddle.utils import deprecated as deprecated

def record_program_ops_pre_hook(layer, inputs) -> None: ...
def set_op_customized_attrs_post_hook(layer, inputs, outputs) -> None: ...

class LayerObjectHelper(LayerHelperBase):
    def __init__(self, name) -> None: ...
    def append_op(self, type: Incomplete | None = None, inputs: Incomplete | None = None, outputs: Incomplete | None = None, attrs: Incomplete | None = None, stop_gradient: Incomplete | None = None): ...
    def iter_inputs_and_params(self, inputs_in, param_attr_in: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def input_dtype(self, inputs_in): ...
    def get_parameter(self, name): ...
    def append_activation(self, input_var, act: Incomplete | None = None, use_cudnn: Incomplete | None = None): ...
    def is_instance(self, param, cls) -> None: ...

class LayerOpsRecoder:
    start: Incomplete
    end: Incomplete
    ops: Incomplete
    is_valid: Incomplete
    hooks: Incomplete
    def __init__(self, start: int = -1, end: int = -1, ops: Incomplete | None = None, is_valid: bool = False, hooks: Incomplete | None = None) -> None: ...

class HookRemoveHelper:
    next_hook_id: int
    def __init__(self, hooks) -> None: ...
    def remove(self) -> None: ...

class Layer:
    training: bool
    def __init__(self, name_scope: Incomplete | None = None, dtype: str = 'float32') -> None: ...
    def train(self) -> None: ...
    def eval(self) -> None: ...
    def apply(self, fn): ...
    def full_name(self): ...
    def register_forward_post_hook(self, hook): ...
    def register_forward_pre_hook(self, hook): ...
    def create_parameter(self, shape, attr: Incomplete | None = None, dtype: Incomplete | None = None, is_bias: bool = False, default_initializer: Incomplete | None = None): ...
    def create_variable(self, name: Incomplete | None = None, persistable: Incomplete | None = None, dtype: Incomplete | None = None): ...
    def create_tensor(self, name: Incomplete | None = None, persistable: Incomplete | None = None, dtype: Incomplete | None = None): ...
    def parameters(self, include_sublayers: bool = True): ...
    def astype(self, dtype: Incomplete | None = None): ...
    def children(self) -> Generator[Incomplete]: ...
    def named_children(self) -> Generator[Incomplete]: ...
    def sublayers(self, include_self: bool = False): ...
    def named_parameters(self, prefix: str = '', include_sublayers: bool = True) -> Generator[Incomplete]: ...
    def named_sublayers(self, prefix: str = '', include_self: bool = False, layers_set: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def register_buffer(self, name, tensor, persistable: bool = True) -> None: ...
    def buffers(self, include_sublayers: bool = True): ...
    def named_buffers(self, prefix: str = '', include_sublayers: bool = True) -> Generator[Incomplete]: ...
    def clear_gradients(self) -> None: ...
    def __call__(self, *inputs, **kwargs): ...
    def forward(self, *inputs, **kwargs) -> None: ...
    def backward(self, *inputs) -> None: ...
    def add_sublayer(self, name, sublayer): ...
    def add_parameter(self, name, parameter): ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __dir__(self): ...
    def extra_repr(self): ...
    def register_state_dict_hook(self, hook): ...
    def to_static_state_dict(self, destination: Incomplete | None = None, include_sublayers: bool = True, structured_name_prefix: str = '', use_hook: bool = True): ...
    def state_dict(self, destination: Incomplete | None = None, include_sublayers: bool = True, structured_name_prefix: str = '', use_hook: bool = True): ...
    def set_state_dict(self, state_dict, use_structured_name: bool = True): ...
    def to(self, device: Incomplete | None = None, dtype: Incomplete | None = None, blocking: Incomplete | None = None): ...
    set_dict = set_state_dict
    load_dict = set_state_dict
    def float(self, excluded_layers: Incomplete | None = None): ...
    def float16(self, excluded_layers: Incomplete | None = None): ...
    def bfloat16(self, excluded_layers: Incomplete | None = None): ...
