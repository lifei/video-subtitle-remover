from .layers import Layer as Layer
from _typeshed import Incomplete
from paddle import in_dynamic_mode as in_dynamic_mode

class Identity(Layer):
    def __init__(self, *args, **kwargs) -> None: ...
    def forward(self, input): ...

class Linear(Layer):
    weight: Incomplete
    bias: Incomplete
    name: Incomplete
    def __init__(self, in_features, out_features, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class Upsample(Layer):
    size: Incomplete
    scale_factor: Incomplete
    mode: Incomplete
    align_corners: Incomplete
    align_mode: Incomplete
    data_format: Incomplete
    name: Incomplete
    def __init__(self, size: Incomplete | None = None, scale_factor: Incomplete | None = None, mode: str = 'nearest', align_corners: bool = False, align_mode: int = 0, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class UpsamplingNearest2D(Layer):
    size: Incomplete
    scale_factor: Incomplete
    data_format: Incomplete
    name: Incomplete
    def __init__(self, size: Incomplete | None = None, scale_factor: Incomplete | None = None, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class UpsamplingBilinear2D(Layer):
    size: Incomplete
    scale_factor: Incomplete
    data_format: Incomplete
    name: Incomplete
    def __init__(self, size: Incomplete | None = None, scale_factor: Incomplete | None = None, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Bilinear(Layer):
    weight: Incomplete
    bias: Incomplete
    def __init__(self, in1_features, in2_features, out_features, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    def forward(self, x1, x2): ...
    def extra_repr(self): ...

class Dropout(Layer):
    p: Incomplete
    axis: Incomplete
    mode: Incomplete
    name: Incomplete
    def __init__(self, p: float = 0.5, axis: Incomplete | None = None, mode: str = 'upscale_in_train', name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class Dropout2D(Layer):
    p: Incomplete
    data_format: Incomplete
    name: Incomplete
    def __init__(self, p: float = 0.5, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class Dropout3D(Layer):
    p: Incomplete
    data_format: Incomplete
    name: Incomplete
    def __init__(self, p: float = 0.5, data_format: str = 'NCDHW', name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class AlphaDropout(Layer):
    p: Incomplete
    name: Incomplete
    def __init__(self, p: float = 0.5, name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class Pad1D(Layer):
    def __init__(self, padding, mode: str = 'constant', value: float = 0.0, data_format: str = 'NCL', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Pad2D(Layer):
    def __init__(self, padding, mode: str = 'constant', value: float = 0.0, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class ZeroPad2D(Layer):
    def __init__(self, padding, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Pad3D(Layer):
    def __init__(self, padding, mode: str = 'constant', value: float = 0.0, data_format: str = 'NCDHW', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class CosineSimilarity(Layer):
    def __init__(self, axis: int = 1, eps: float = 1e-08) -> None: ...
    def forward(self, x1, x2): ...
    def extra_repr(self): ...

class Embedding(Layer):
    weight: Incomplete
    def __init__(self, num_embeddings, embedding_dim, padding_idx: Incomplete | None = None, sparse: bool = False, weight_attr: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Unfold(Layer):
    kernel_sizes: Incomplete
    dilations: Incomplete
    paddings: Incomplete
    strides: Incomplete
    name: Incomplete
    def __init__(self, kernel_sizes, dilations: int = 1, paddings: int = 0, strides: int = 1, name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class Fold(Layer):
    output_sizes: Incomplete
    kernel_sizes: Incomplete
    dilations: Incomplete
    paddings: Incomplete
    strides: Incomplete
    name: Incomplete
    def __init__(self, output_sizes, kernel_sizes, dilations: int = 1, paddings: int = 0, strides: int = 1, name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class Flatten(Layer):
    start_axis: Incomplete
    stop_axis: Incomplete
    def __init__(self, start_axis: int = 1, stop_axis: int = -1) -> None: ...
    def forward(self, input): ...

class Unflatten(Layer):
    axis: Incomplete
    shape: Incomplete
    name: Incomplete
    def __init__(self, axis, shape, name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...
