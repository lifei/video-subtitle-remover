from ...base import dygraph_utils as dygraph_utils
from ...base.data_feeder import check_variable_and_dtype as check_variable_and_dtype
from ...framework import ParamAttr as ParamAttr, get_default_dtype as get_default_dtype, in_dynamic_or_pir_mode as in_dynamic_or_pir_mode, in_pir_mode as in_pir_mode, no_grad as no_grad
from ..functional import batch_norm as batch_norm, instance_norm as instance_norm, layer_norm as layer_norm
from ..initializer import Constant as Constant, Normal as Normal
from .layers import Layer as Layer
from _typeshed import Incomplete
from paddle import in_dynamic_mode as in_dynamic_mode
from paddle.device import get_all_custom_device_type as get_all_custom_device_type

class _InstanceNormBase(Layer):
    scale: Incomplete
    bias: Incomplete
    def __init__(self, num_features, epsilon: float = 1e-05, momentum: float = 0.9, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class InstanceNorm1D(_InstanceNormBase):
    def __init__(self, num_features, epsilon: float = 1e-05, momentum: float = 0.9, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCL', name: Incomplete | None = None) -> None: ...

class InstanceNorm2D(_InstanceNormBase):
    def __init__(self, num_features, epsilon: float = 1e-05, momentum: float = 0.9, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...

class InstanceNorm3D(_InstanceNormBase):
    def __init__(self, num_features, epsilon: float = 1e-05, momentum: float = 0.9, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCDHW', name: Incomplete | None = None) -> None: ...

class GroupNorm(Layer):
    weight: Incomplete
    bias: Incomplete
    def __init__(self, num_groups, num_channels, epsilon: float = 1e-05, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class LayerNorm(Layer):
    weight: Incomplete
    bias: Incomplete
    def __init__(self, normalized_shape, epsilon: float = 1e-05, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class _BatchNormBase(Layer):
    weight: Incomplete
    bias: Incomplete
    def __init__(self, num_features, momentum: float = 0.9, epsilon: float = 1e-05, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCHW', use_global_stats: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class BatchNorm(Layer):
    weight: Incomplete
    bias: Incomplete
    def __init__(self, num_channels, act: Incomplete | None = None, is_test: bool = False, momentum: float = 0.9, epsilon: float = 1e-05, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, dtype: str = 'float32', data_layout: str = 'NCHW', in_place: bool = False, moving_mean_name: Incomplete | None = None, moving_variance_name: Incomplete | None = None, do_model_average_for_mean_and_var: bool = True, use_global_stats: bool = False, trainable_statistics: bool = False) -> None: ...
    def forward(self, input): ...

class BatchNorm1D(_BatchNormBase):
    def __init__(self, num_features, momentum: float = 0.9, epsilon: float = 1e-05, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCL', use_global_stats: Incomplete | None = None, name: Incomplete | None = None) -> None: ...

class BatchNorm2D(_BatchNormBase): ...

class BatchNorm3D(_BatchNormBase):
    def __init__(self, num_features, momentum: float = 0.9, epsilon: float = 1e-05, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCDHW', use_global_stats: Incomplete | None = None, name: Incomplete | None = None) -> None: ...

class SyncBatchNorm(_BatchNormBase):
    weight: Incomplete
    bias: Incomplete
    def __init__(self, num_features, momentum: float = 0.9, epsilon: float = 1e-05, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    @classmethod
    def convert_sync_batchnorm(cls, layer): ...

class LocalResponseNorm(Layer):
    size: Incomplete
    alpha: Incomplete
    beta: Incomplete
    k: Incomplete
    data_format: Incomplete
    name: Incomplete
    def __init__(self, size, alpha: float = 0.0001, beta: float = 0.75, k: float = 1.0, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, input): ...
    def extra_repr(self): ...

class SpectralNorm(Layer):
    weight_u: Incomplete
    weight_v: Incomplete
    def __init__(self, weight_shape, dim: int = 0, power_iters: int = 1, eps: float = 1e-12, dtype: str = 'float32') -> None: ...
    def forward(self, x): ...
