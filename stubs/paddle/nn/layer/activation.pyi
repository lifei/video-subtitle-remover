from ..initializer import Constant as Constant
from .layers import Layer as Layer
from _typeshed import Incomplete
from paddle.framework import get_default_dtype as get_default_dtype

class CELU(Layer):
    def __init__(self, alpha: float = 1.0, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class ELU(Layer):
    def __init__(self, alpha: float = 1.0, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class GLU(Layer):
    def __init__(self, axis: int = -1, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class GELU(Layer):
    def __init__(self, approximate: bool = False, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Hardshrink(Layer):
    def __init__(self, threshold: float = 0.5, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Hardswish(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Tanh(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Hardtanh(Layer):
    def __init__(self, min: float = -1.0, max: float = 1.0, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class PReLU(Layer):
    def __init__(self, num_parameters: int = 1, init: float = 0.25, weight_attr: Incomplete | None = None, data_format: str = 'NCHW', name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class RReLU(Layer):
    def __init__(self, lower=..., upper=..., name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class ReLU(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class ReLU6(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class SELU(Layer):
    def __init__(self, scale: float = 1.0507009873554805, alpha: float = 1.6732632423543772, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class LeakyReLU(Layer):
    def __init__(self, negative_slope: float = 0.01, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Sigmoid(Layer):
    name: Incomplete
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Hardsigmoid(Layer):
    name: Incomplete
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Softplus(Layer):
    def __init__(self, beta: int = 1, threshold: int = 20, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Softshrink(Layer):
    def __init__(self, threshold: float = 0.5, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Softsign(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Swish(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Mish(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Tanhshrink(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class ThresholdedReLU(Layer):
    def __init__(self, threshold: float = 1.0, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Silu(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class LogSigmoid(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Softmax(Layer):
    def __init__(self, axis: int = -1, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class LogSoftmax(Layer):
    def __init__(self, axis: int = -1, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Maxout(Layer):
    def __init__(self, groups, axis: int = 1, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...

class Softmax2D(Layer):
    def __init__(self, name: Incomplete | None = None) -> None: ...
    def forward(self, x): ...
    def extra_repr(self): ...
