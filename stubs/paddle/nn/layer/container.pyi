from ...base.dygraph.base import param_guard as param_guard
from ...base.framework import Parameter as Parameter
from .layers import Layer as Layer
from _typeshed import Incomplete

class LayerDict(Layer):
    def __init__(self, sublayers: Incomplete | None = None) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, sublayer) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __contains__(self, key) -> bool: ...
    def clear(self) -> None: ...
    def pop(self, key): ...
    def keys(self): ...
    def items(self): ...
    def values(self): ...
    def update(self, sublayers) -> None: ...

class ParameterList(Layer):
    def __init__(self, parameters: Incomplete | None = None) -> None: ...
    def __getitem__(self, idx): ...
    def __setitem__(self, idx, param) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def append(self, parameter): ...

class LayerList(Layer):
    def __init__(self, sublayers: Incomplete | None = None) -> None: ...
    def __getitem__(self, idx): ...
    def __setitem__(self, idx, sublayer) -> None: ...
    def __delitem__(self, idx) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def append(self, sublayer): ...
    def insert(self, index, sublayer) -> None: ...
    def extend(self, sublayers): ...

class Sequential(Layer):
    def __init__(self, *layers) -> None: ...
    def __getitem__(self, name): ...
    def __setitem__(self, name, layer) -> None: ...
    def __delitem__(self, name) -> None: ...
    def __len__(self) -> int: ...
    def forward(self, input): ...
