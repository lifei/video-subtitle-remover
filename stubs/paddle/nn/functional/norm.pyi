from ...base.data_feeder import check_type as check_type, check_variable_and_dtype as check_variable_and_dtype
from ...base.layer_helper import LayerHelper as LayerHelper
from _typeshed import Incomplete
from paddle import base as base, in_dynamic_mode as in_dynamic_mode
from paddle.base.framework import in_dygraph_mode as in_dygraph_mode, in_dynamic_or_pir_mode as in_dynamic_or_pir_mode, in_pir_mode as in_pir_mode

def normalize(x, p: int = 2, axis: int = 1, epsilon: float = 1e-12, name: Incomplete | None = None): ...
def batch_norm(x, running_mean, running_var, weight: Incomplete | None = None, bias: Incomplete | None = None, training: bool = False, momentum: float = 0.9, epsilon: float = 1e-05, data_format: str = 'NCHW', use_global_stats: Incomplete | None = None, name: Incomplete | None = None): ...
def layer_norm(x, normalized_shape, weight: Incomplete | None = None, bias: Incomplete | None = None, epsilon: float = 1e-05, name: Incomplete | None = None): ...
def instance_norm(x, running_mean: Incomplete | None = None, running_var: Incomplete | None = None, weight: Incomplete | None = None, bias: Incomplete | None = None, use_input_stats: bool = True, momentum: float = 0.9, eps: float = 1e-05, data_format: str = 'NCHW', name: Incomplete | None = None): ...
def local_response_norm(x, size, alpha: float = 0.0001, beta: float = 0.75, k: float = 1.0, data_format: str = 'NCHW', name: Incomplete | None = None): ...
