from ..opcode_translator.instruction_utils import instrs_info as instrs_info
from ..utils import Singleton as Singleton, log as log
from .executor.opcode_executor import OpcodeExecutorBase as OpcodeExecutorBase
from _typeshed import Incomplete
from dataclasses import dataclass

@dataclass
class Breakpoint:
    file: str
    line: int
    co_name: str
    offset: int
    def __hash__(self): ...

class BreakpointManager:
    breakpoints: Incomplete
    executors: Incomplete
    activate: int
    record_event: Incomplete
    def __init__(self) -> None: ...
    def clear_event(self, event) -> None: ...
    def add_event(self, event) -> None: ...
    def add(self, file, line, coname: Incomplete | None = None, offset: Incomplete | None = None) -> None: ...
    def addn(self, *lines) -> None: ...
    def clear(self) -> None: ...
    def hit(self, file, line, co_name, offset): ...
    def locate(self, exe) -> None: ...
    def up(self) -> None: ...
    def down(self) -> None: ...
    def opcode(self, cur_exe: Incomplete | None = None): ...
    def bt(self) -> None: ...
    def on_event(self, event) -> None: ...
    def dis(self, range: int = 5) -> None: ...
    @property
    def cur_exe(self): ...
    def sir(self) -> None: ...
    def pe(self, e) -> None: ...

def add_breakpoint(file, line, co_name: Incomplete | None = None, offset: Incomplete | None = None) -> None: ...
def add_event(event) -> None: ...

BM: Incomplete
