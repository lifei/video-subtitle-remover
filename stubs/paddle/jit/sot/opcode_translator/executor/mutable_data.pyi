from _typeshed import Incomplete
from typing import Any, Callable, Generic, TypeVar
from typing_extensions import Concatenate, ParamSpec, TypeAlias

P = ParamSpec('P')
R = TypeVar('R')
MutableDataT = TypeVar('MutableDataT', bound='MutableData')
DataGetter: TypeAlias
InnerMutableDataT = TypeVar('InnerMutableDataT', bound='dict[str, Any] | list[Any]')

class Mutation:
    ABBR: str

class MutationSet(Mutation):
    ABBR: str
    key: Incomplete
    value: Incomplete
    def __init__(self, key, value) -> None: ...

class MutationDel(Mutation):
    ABBR: str
    key: Incomplete
    def __init__(self, key) -> None: ...

class MutationNew(Mutation):
    ABBR: str
    key: Incomplete
    value: Incomplete
    def __init__(self, key, value) -> None: ...

class MutationInsert(Mutation):
    ABBR: str
    index: Incomplete
    value: Incomplete
    def __init__(self, index, value) -> None: ...

class MutationPermutate(Mutation):
    ABBR: str
    permutation: Incomplete
    def __init__(self, permutation) -> None: ...

def record_mutation(mutation_fn: Callable[Concatenate[MutableDataT, P], Mutation]) -> Callable[Concatenate[MutableDataT, P], None]: ...

class MutableData(Generic[InnerMutableDataT]):
    read_cache: InnerMutableDataT
    class Empty: ...
    original_data: Incomplete
    getter: Incomplete
    records: list[Mutation]
    def __init__(self, data: Any, getter: DataGetter) -> None: ...
    def is_empty(self, value): ...
    @property
    def version(self): ...
    @property
    def has_changed(self): ...
    def rollback(self, version: int): ...
    def get(self, key) -> None: ...
    def set(self, key, value) -> None: ...
    def apply(self, mutation: Mutation, write_cache: InnerMutableDataT): ...
    def reproduce(self, version: int | None = None) -> InnerMutableDataT: ...

class MutableDictLikeData(MutableData['dict[str, Any]']):
    read_cache: Incomplete
    def __init__(self, data: Any, getter: DataGetter) -> None: ...
    def clear_read_cache(self) -> None: ...
    def get(self, key: Any): ...
    def get_all(self): ...
    def set(self, key: Any, value: Any) -> Mutation: ...
    def delete(self, key): ...
    def apply(self, mutation: Mutation, write_cache: dict[str, Any]): ...
    def reproduce(self, version: int | None = None): ...

class MutableListLikeData(MutableData['list[Any]']):
    read_cache: Incomplete
    def __init__(self, data: Any, getter: DataGetter) -> None: ...
    def clear_read_cache(self) -> None: ...
    @property
    def length(self): ...
    def get(self, key): ...
    def get_all(self) -> list[Any]: ...
    def set(self, key: int, value: Any): ...
    def delete(self, key: int): ...
    def insert(self, index: int, value: Any): ...
    def permutate(self, permutation: list[int]): ...
    def apply(self, mutation: Mutation, write_cache: list[Any]): ...
