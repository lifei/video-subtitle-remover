import types
from ...profiler import EventGuard as EventGuard
from ...utils import InnerError as InnerError, current_tmp_name_records as current_tmp_name_records, log as log, log_do as log_do
from .variables import VariableBase as VariableBase
from _typeshed import Incomplete
from typing import Any, Callable, TypeVar

Guard = Callable[[types.FrameType], bool]
CheckGuardInputT = TypeVar('CheckGuardInputT', bound=VariableBase)

class StringifyExpression:
    expr: Incomplete
    debug_expr: Incomplete
    free_vars: Incomplete
    def __init__(self, str_expr, sub_exprs, free_vars) -> None: ...
    def __post_init__(self) -> None: ...
    def check_expr(self, expr: str): ...
    def __hash__(self): ...

def union_free_vars(*free_vars: dict[str, Any]): ...
def make_guard(stringify_guards: list[StringifyExpression]) -> Guard: ...
def support_weak_ref(obj): ...
def check_guard(fn: Callable[[CheckGuardInputT], list[StringifyExpression]]) -> Callable[[CheckGuardInputT], list[StringifyExpression]]: ...
def object_equal_stringify_guard(self) -> list[StringifyExpression]: ...
