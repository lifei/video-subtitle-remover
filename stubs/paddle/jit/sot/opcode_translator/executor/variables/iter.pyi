from ....utils import BreakGraphError as BreakGraphError, FallbackError as FallbackError
from ..function_graph import FunctionGraph as FunctionGraph
from ..pycode_generator import PyCodeGen as PyCodeGen
from ..tracker import ConstTracker as ConstTracker, DummyTracker as DummyTracker, Tracker as Tracker
from .base import VariableBase as VariableBase
from .basic import ConstantVariable as ConstantVariable
from .container import ContainerVariable as ContainerVariable, TupleVariable as TupleVariable
from _typeshed import Incomplete
from typing import Any

class IterVariable(VariableBase):
    hold: Incomplete
    def __init__(self, obj: VariableBase, graph: FunctionGraph, tracker: Tracker) -> None: ...
    def make_stringify_guard(self): ...
    def next(self) -> None: ...
    def get_iter(self): ...
    def get_hold(self): ...

class SequenceIterVariable(IterVariable):
    mutable_attrs: Incomplete
    idx: int
    def __init__(self, obj, graph: FunctionGraph, tracker: Tracker) -> None: ...
    def next(self): ...
    def to_list(self) -> list: ...
    def has_side_effect(self) -> bool: ...
    @property
    def main_info(self) -> dict[str, Any]: ...

class EnumerateVariable(SequenceIterVariable):
    def __init__(self, val_iterator, graph, tracker) -> None: ...
    def next(self): ...
    def to_list(self): ...
    def has_side_effect(self) -> bool: ...
    def get_hold(self): ...
    @staticmethod
    def from_iterator(value, graph: FunctionGraph | None, tracker: Tracker): ...

class MapVariable(SequenceIterVariable):
    func: Incomplete
    def __init__(self, func, val_iterator, graph, tracker) -> None: ...
    def next(self): ...
    def to_list(self) -> list: ...
    def has_side_effect(self) -> bool: ...
    @staticmethod
    def from_iterator(func, value, graph: FunctionGraph | None, tracker: Tracker): ...

class UserDefinedIterVariable(IterVariable):
    def __init__(self, obj, graph, tracker) -> None: ...
    def next(self) -> None: ...
