import paddle
from ....infer_meta import MetaInfo as MetaInfo
from ....symbolic.statement_ir import Symbol as Symbol
from ....utils import BreakGraphError as BreakGraphError, FallbackError as FallbackError, NameGenerator as NameGenerator, paddle_tensor_methods as paddle_tensor_methods
from ....utils.exceptions import HasNoAttributeError as HasNoAttributeError, InnerError as InnerError
from ..dispatch_functions import tensor_numel as tensor_numel
from ..function_graph import FunctionGraph as FunctionGraph
from ..guard import StringifyExpression as StringifyExpression, check_guard as check_guard, object_equal_stringify_guard as object_equal_stringify_guard, union_free_vars as union_free_vars
from ..mutable_data import MutableDictLikeData as MutableDictLikeData
from ..pycode_generator import PyCodeGen as PyCodeGen
from ..tracker import ConstTracker as ConstTracker, DanglingTracker as DanglingTracker, DummyTracker as DummyTracker, GetAttrTracker as GetAttrTracker, GetIterTracker as GetIterTracker, GlobalTracker as GlobalTracker, Tracker as Tracker
from .base import ConstTypes as ConstTypes, VariableBase as VariableBase, VariableFactory as VariableFactory
from .callable import FunctionVariable as FunctionVariable
from _typeshed import Incomplete
from functools import cached_property as cached_property
from typing import Any

FP_DTYPE_ABBRS: Incomplete
CP_DTYPE_ABBRS: Incomplete
INT_DTYPE_ABBRS: Incomplete
DTYPE_ABBRS: Incomplete

class ConstantVariable(VariableBase):
    value: Incomplete
    def __init__(self, value: Any, graph: FunctionGraph, tracker: Tracker) -> None: ...
    def get_py_value(self, allow_tensor: bool = False): ...
    @property
    def debug_name(self) -> str: ...
    @debug_name.setter
    def debug_name(self, name) -> None: ...
    @property
    def main_info(self) -> dict[str, Any]: ...
    def __bool__(self) -> bool: ...
    def bool(self): ...
    def bool_not(self): ...
    def str(self): ...
    def format(self, *args): ...
    def lower(self): ...
    def ord(self): ...
    def chr(self): ...
    def from_value(value: Any, graph: FunctionGraph, tracker: Tracker): ...
    @staticmethod
    def wrap_literal(value: Any, graph: FunctionGraph) -> ConstantVariable: ...

class PrintStmtVariable(VariableBase):
    graph: Incomplete
    def __init__(self, value: Any, graph: FunctionGraph) -> None: ...
    def flatten_items(self): ...

IMPLEMENTED_TENSOR_PROPERTIES: Incomplete

def tensor_property(func): ...

class DataVariable(VariableBase):
    value: Incomplete
    def __init__(self, value: Any, graph: FunctionGraph, tracker: Tracker) -> None: ...
    def get_py_value(self, allow_tensor: bool = False): ...

class TensorDtypeVariable(DataVariable):
    def __init__(self, value, graph, tracker) -> None: ...
    def make_stringify_guard(self) -> list[StringifyExpression]: ...
    @property
    def main_info(self) -> dict[str, Any]: ...
    def from_value(value: Any, graph: FunctionGraph, tracker: Tracker): ...

class TensorVariable(VariableBase):
    var_name_generator: Incomplete
    mutable_attrs: Incomplete
    value: Incomplete
    meta: Incomplete
    origin_meta: Incomplete
    var_name: Incomplete
    def __init__(self, tensor: paddle.Tensor | MetaInfo, graph: FunctionGraph, tracker: Tracker) -> None: ...
    def __len__(self) -> int: ...
    id: Incomplete
    def get_py_value(self, allow_tensor: bool = False): ...
    def get_py_type(self): ...
    def get_symbol(self) -> Symbol: ...
    @property
    def out_var_name(self): ...
    def make_stringify_guard(self) -> list[StringifyExpression]: ...
    def get_iter(self): ...
    @property
    def main_info(self) -> dict[str, Any]: ...
    def getitem(self, key): ...
    def setitem(self, key, value) -> None: ...
    def T(self): ...
    def ndim(self): ...
    def size(self): ...
    def shape(self): ...
    def numel(self): ...
    def len(self): ...
    def is_tensor(self): ...
    def is_complex(self): ...
    def is_integer(self): ...
    def is_floating_point(self): ...
    def getattr(self, name: str, default: Incomplete | None = None): ...
    def setattr(self, key, val) -> None: ...
    def delattr(self, key) -> None: ...
    def from_value(value: Any, graph: FunctionGraph, tracker: Tracker): ...

class ObjectVariable(VariableBase):
    make_stringify_guard = object_equal_stringify_guard
    value: Incomplete
    def __init__(self, obj, graph, tracker) -> None: ...
    @property
    def main_info(self) -> dict[str, Any]: ...
    def get_py_value(self, allow_tensor: bool = False) -> Any: ...

class SliceVariable(VariableBase):
    value: Incomplete
    def __init__(self, slice_: slice, graph, tracker) -> None: ...
    @property
    def debug_name(self) -> str: ...
    @debug_name.setter
    def debug_name(self, name) -> None: ...
    @cached_property
    def attr_proxy(self): ...
    @property
    def main_info(self) -> dict[str, Any]: ...
    def get_py_value(self, allow_tensor: bool = False): ...
    def make_stringify_guard(self) -> list[StringifyExpression]: ...
    def setattr(self, key, val) -> None: ...
    def delattr(self, key) -> None: ...
    def from_value(value: Any, graph: FunctionGraph, tracker: Tracker): ...

class ModuleVariable(VariableBase):
    value: Incomplete
    def __init__(self, func, graph, tracker) -> None: ...
    def get_py_value(self, allow_tensor: bool = False): ...
    @property
    def main_info(self) -> dict[str, Any]: ...
    def from_value(value: Any, graph: FunctionGraph, tracker: Tracker): ...
    make_stringify_guard = object_equal_stringify_guard

class DygraphTracerVariable(VariableBase):
    value: Incomplete
    def __init__(self, value, graph, tracker) -> None: ...
    def get_py_value(self, allow_tensor: bool = False): ...
    def make_stringify_guard(self) -> list[StringifyExpression]: ...
    @property
    def main_info(self) -> dict[str, Any]: ...
    def from_value(value: Any, graph: FunctionGraph, tracker: Tracker): ...

class NumpyVariable(VariableBase):
    value: Incomplete
    def __init__(self, value, graph, tracker) -> None: ...
    @property
    def main_info(self) -> dict[str, Any]: ...
    def get_py_value(self, allow_tensor: bool = False) -> Any: ...
    def make_stringify_guard(self) -> list[StringifyExpression]: ...
    def from_value(value: Any, graph: FunctionGraph, tracker: Tracker): ...

class NullVariable(VariableBase):
    def __init__(self) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def reconstruct(self, codegen: PyCodeGen): ...

class CellVariable(VariableBase):
    def __init__(self, value: Incomplete | None = None) -> None: ...
    def reconstruct(self, codegen: PyCodeGen, *, use_tracker: bool = True, add_to_global_guarded_vars: bool = True): ...
    def cell_content(self): ...
    value: Incomplete
    def set_value(self, value) -> None: ...
    def empty(self): ...

class GlobalVariable(VariableBase):
    proxy: Incomplete
    def __init__(self, val_dict, graph: FunctionGraph, tracker: Tracker) -> None: ...
    def proxy_getter(self, proxy: MutableDictLikeData, key: Any): ...
    def get_value(self): ...
    def keys(self): ...
    def get(self, key): ...
    def set(self, key, value) -> None: ...
    def delete(self, key) -> None: ...

class FunctionGlobalVariable(GlobalVariable):
    fn: Incomplete
    def __init__(self, fn: FunctionVariable, val_dict: dict[str, Any], graph: FunctionGraph, tracker: Tracker) -> None: ...
    def proxy_getter(self, proxy: MutableDictLikeData, key: Any): ...
