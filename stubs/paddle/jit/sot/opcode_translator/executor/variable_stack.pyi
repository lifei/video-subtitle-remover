from _typeshed import Incomplete
from typing import Any, Callable, Generic, TypeVar, overload

ValidateValueFunc = Callable[[Any], None]
StackDataT = TypeVar('StackDataT')

class VariableStack(Generic[StackDataT]):
    class VariablePeeker:
        @overload
        def __getitem__(self, index: int) -> StackDataT: ...
        @overload
        def __getitem__(self, index: slice) -> list[StackDataT]: ...
        @overload
        def __call__(self, index: int = 1) -> StackDataT: ...
        @overload
        def __call__(self, index: slice) -> list[StackDataT]: ...
        validate_value_func: Incomplete
        def __init__(self, data: list[StackDataT], validate_value_func: ValidateValueFunc) -> None: ...
        def __getitem__(self, index: int | slice) -> StackDataT | list[StackDataT]: ...
        def __setitem__(self, index: int, value: Any): ...
        def __call__(self, index: int | slice = 1) -> StackDataT | list[StackDataT]: ...
    validate_value_func: Incomplete
    def __init__(self, data: list[StackDataT] | None = None, *, validate_value_func: ValidateValueFunc | None = None) -> None: ...
    def copy(self): ...
    def push(self, val: StackDataT): ...
    def insert(self, index: int, val: StackDataT): ...
    def pop(self) -> StackDataT: ...
    def pop_n(self, n: int) -> list[StackDataT]: ...
    @property
    def peek(self) -> VariablePeeker: ...
    @property
    def top(self) -> StackDataT: ...
    @top.setter
    def top(self, value) -> None: ...
    def __contains__(self, value) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
