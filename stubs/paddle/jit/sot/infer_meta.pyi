from .utils import Cache as Cache, Singleton as Singleton, map_if_extend as map_if_extend, meta_str as meta_str
from _typeshed import Incomplete
from functools import cached_property as cached_property
from paddle.amp.auto_cast import amp_state as amp_state
from paddle.base import framework as framework
from paddle.base.data_feeder import convert_dtype as convert_dtype
from paddle.base.unique_name import UniqueNameGenerator as UniqueNameGenerator
from paddle.utils import flatten as flatten, is_sequence as is_sequence

class MetaInfo:
    name: Incomplete
    persistable: Incomplete
    type: Incomplete
    place: Incomplete
    shape: Incomplete
    dtype: Incomplete
    stop_gradient: Incomplete
    def __init__(self, shape, dtype, stop_gradient, name, persistable, type, place) -> None: ...
    @staticmethod
    def from_tensor(tensor): ...
    def is_dynamic_shape(self): ...
    def to_input_spec(self): ...
    def guard_str(self): ...
    def __eq__(self, meta): ...
    def __hash__(self): ...

class VariableCreator:
    var_name_generator: Incomplete
    def __init__(self) -> None: ...
    def gen_name(self, meta): ...
    @property
    def var_cache(self): ...
    @cached_property
    def legacy_var_cache(self): ...
    @cached_property
    def pir_var_cache(self): ...
    @cached_property
    def legacy_programs(self): ...
    @cached_property
    def pir_programs(self): ...
    @property
    def main_program(self): ...
    @property
    def startup_program(self): ...
    def create_var(self, meta): ...
    def get_variable(self, meta): ...
    def infer_meta(self, func, *args, **kwargs): ...

def convert_meta_to_variable(args): ...
def convert_meta_to_input_spec(args): ...
def convert_variable_to_meta_info(args): ...
def infer_meta(func, *args, **kwargs): ...
def infer_meta_for_layer(layer, *args, **kwargs): ...

class SpecialInferMeta:
    def __init__(self) -> None: ...
    def get_infermeta_fn(self, fn): ...
    def infermeta_grad(self, outputs, inputs, grad_outputs: Incomplete | None = None, retain_graph: Incomplete | None = None, create_graph: bool = False, only_inputs: bool = True, allow_unused: bool = False, no_grad_vars: Incomplete | None = None): ...

class InferMetaCache(Cache):
    def key_fn(self, func, *args, **kwargs): ...
    def value_fn(self, func, *args, **kwargs): ...

class LayerInferMetaCache(Cache):
    def key_fn(self, layer, *args, **kwargs): ...
    def value_fn(self, layer, *args, **kwargs): ...
