from . import logging_utils as logging_utils
from .export_subgraph import SubGraphRole as SubGraphRole, pir_exporter as pir_exporter
from .utils import RETURN_NO_VALUE_MAGIC_NUM as RETURN_NO_VALUE_MAGIC_NUM, backend_guard as backend_guard, construct_grad_names as construct_grad_names
from _typeshed import Incomplete
from paddle.base import backward as backward, core as core, framework as framework, program_guard as program_guard
from paddle.base.compiler import BuildStrategy as BuildStrategy
from paddle.base.data_feeder import check_type as check_type, convert_dtype as convert_dtype
from paddle.base.dygraph.base import switch_to_static_graph as switch_to_static_graph
from paddle.base.framework import get_flags as get_flags
from paddle.base.unique_name import switch as switch
from paddle.optimizer.lr import LRScheduler as LRScheduler

class NestSequence:
    def __init__(self, raw_input, need_check: bool = False) -> None: ...
    def tolist(self): ...
    def restore(self, value_list): ...
    @property
    def var_ids(self): ...
    def __getitem__(self, item): ...

class LazyInitialized:
    function: Incomplete
    def __init__(self, function) -> None: ...
    def __get__(self, instance, cls): ...

class ProgramInfo:
    op_size: Incomplete
    programs: Incomplete
    mode: str
    def __init__(self) -> None: ...
    def __call__(self, key, prog_creator): ...

class PartialProgramLayerHook:
    def before_append_backward(self, forward_program) -> None: ...
    def after_append_backward(self, whole_program, backward_start_idx) -> None: ...
    def after_infer(self, infer_program) -> None: ...

class PartialProgramLayer:
    training: bool
    def __init__(self, main_program, inputs, outputs, name_generator, parameters: Incomplete | None = None, **kwargs) -> None: ...
    def __call__(self, inputs): ...
    def sot_call(self, inputs): ...
    def set_hooker(self, hooker) -> None: ...
    def get_forward_end_op_idx(self, program): ...
    @property
    def program(self): ...
    @property
    def program_id(self): ...
    @property
    def train_program(self): ...
    @property
    def infer_program(self): ...
    @property
    def forward_program(self): ...
    @property
    def backward_program(self): ...
    def prepare_gradient_aggregation(self, start_idx, main_program, target_program): ...

def partial_program_from(concrete_program, from_method: bool = False): ...
def add_build_strategy_for(program, start_op_index, end_op_index, build_strategy: Incomplete | None = None, skip_vars: Incomplete | None = None): ...
