from . import utils as utils
from .base_transformer import BaseTransformer as BaseTransformer
from _typeshed import Incomplete
from paddle.utils import gast as gast

class BasicApiTransformer(BaseTransformer):
    root: Incomplete
    class_node_dict: Incomplete
    def __init__(self, root) -> None: ...
    def transform(self): ...
    def visit_Assign(self, node): ...
    def visit_Expr(self, node): ...

class ToTensorTransformer(BaseTransformer):
    root: Incomplete
    def __init__(self, node) -> None: ...
    def transform(self): ...
    def visit_Call(self, node): ...

class NameloadJstTransformer(BaseTransformer):
    root: Incomplete
    def __init__(self, root) -> None: ...
    def transform(self): ...
    def visit_Call(self, node): ...
    def create_visit_with_convert_load(self, node_type, skip_fn: Incomplete | None = None): ...
    def visit_Attribute(self, node): ...
    def visit_Subscript(self, node): ...
    def visit_Name(self, node): ...

class AttributeJstTransformer(BaseTransformer):
    interested_name: Incomplete
    root: Incomplete
    def __init__(self, node) -> None: ...
    def transform(self): ...
    def visit_Attribute(self, node): ...

def is_to_variable(node): ...
def to_assign_node(node): ...
