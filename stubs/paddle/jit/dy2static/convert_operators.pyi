from .py_layer import StaticPyLayer as StaticPyLayer
from .utils import Dygraph2StaticException as Dygraph2StaticException, GetterSetterHelper as GetterSetterHelper, RETURN_NO_VALUE_VAR_NAME as RETURN_NO_VALUE_VAR_NAME, UndefinedVar as UndefinedVar
from .variable_trans_func import to_static_variable as to_static_variable
from _typeshed import Incomplete
from collections.abc import Generator
from paddle.autograd.py_layer import PyLayerMeta as PyLayerMeta
from paddle.base.data_feeder import convert_dtype as convert_dtype
from paddle.base.dygraph.base import in_to_static_mode as in_to_static_mode
from paddle.base.framework import Variable as Variable, core as core, default_main_program as default_main_program
from paddle.pir import Value as Value
from paddle.static.amp.fp16_utils import AmpOptions as AmpOptions

def convert_attr(x, attr): ...
def convert_load(x): ...
def indexable(x, code: Incomplete | None = None): ...
def unpack_by_structure(target, structure): ...
def convert_while_loop(cond, body, getter, setter, return_name_ids: Incomplete | None = None, push_pop_names: Incomplete | None = None) -> None: ...
def convert_logical_and(x_func, y_func): ...
def convert_logical_or(x_func, y_func): ...
def convert_logical_not(x): ...
def convert_ifelse(pred, true_fn, false_fn, get_args, set_args, return_name_ids, push_pop_names: Incomplete | None = None): ...
def convert_len(var): ...
def convert_zip(*args): ...

class VariableTuple:
    var: Incomplete
    len: Incomplete
    rag: Incomplete
    def __init__(self, var, start: int = 0) -> None: ...
    def __getitem__(self, idx): ...
    def __len__(self) -> int: ...

def convert_enumerate(*args): ...
def convert_range(*args): ...
def convert_shape(x): ...
def cast_bool_if_necessary(var): ...
def convert_var_dtype(var, dtype): ...
def convert_assert(cond, message: str = ''): ...
def convert_print(*objects, sep: str = ' ', end: str = '\n', file: Incomplete | None = None, flush: bool = False) -> None: ...
def convert_pop(target, *args): ...
def convert_auto_cast(enable: bool = True, custom_white_list: Incomplete | None = None, custom_black_list: Incomplete | None = None, level: str = 'O1', dtype: str = 'float16', use_promote: bool = True) -> Generator[None]: ...
