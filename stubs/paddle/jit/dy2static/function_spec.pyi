from . import logging_utils as logging_utils
from .utils import func_to_source_code as func_to_source_code, parse_arg_and_kwargs as parse_arg_and_kwargs, parse_varargs_name as parse_varargs_name, type_name as type_name
from _typeshed import Incomplete
from paddle.base import core as core
from paddle.base.data_feeder import convert_dtype as convert_dtype
from paddle.base.dygraph.base import switch_to_static_graph as switch_to_static_graph
from paddle.jit.translated_layer import TranslatedLayer as TranslatedLayer
from paddle.nn.layer import layers as layers

class FunctionSpec:
    varargs_name: Incomplete
    def __init__(self, function, input_spec: Incomplete | None = None) -> None: ...
    def unified_args_and_kwargs(self, args, kwargs): ...
    def args_to_input_spec(self, args, kwargs): ...
    def pir_to_static_inputs_with_spec(self, input_with_spec, main_program): ...
    def to_static_inputs_with_spec(self, input_with_spec, main_program): ...
    @property
    def dygraph_function(self): ...
    @property
    def args_name(self): ...
    @property
    def input_spec(self): ...
    @property
    def flat_input_spec(self): ...
    @property
    def code(self): ...

def get_parameters(layer_instance, include_sublayer: bool = True): ...
def get_buffers(layer_instance, include_sublayer: bool = True): ...
def convert_to_input_spec(inputs, input_spec): ...
def replace_spec_empty_name(args_name, input_with_spec): ...
def spec_greater(first, other): ...
