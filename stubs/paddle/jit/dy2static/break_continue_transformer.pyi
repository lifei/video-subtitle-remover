from .base_transformer import BaseTransformer as BaseTransformer, ForNodeVisitor as ForNodeVisitor
from _typeshed import Incomplete
from paddle.base import unique_name as unique_name
from paddle.jit.dy2static.utils import BaseNodeVisitor as BaseNodeVisitor, index_in_list as index_in_list
from paddle.jit.dy2static.variable_trans_func import create_bool_node as create_bool_node
from paddle.utils import gast as gast

BREAK_NAME_PREFIX: str
CONTINUE_NAME_PREFIX: str

class ForToWhileTransformer(BaseTransformer):
    parent_node: Incomplete
    loop_node: Incomplete
    condition_node: Incomplete
    def __init__(self, parent_node, loop_node, condition_node) -> None: ...
    def transform(self): ...
    def get_for_stmt_nodes(self, node): ...

class BreakContinueTransformer(BaseNodeVisitor):
    root: Incomplete
    def __init__(self, root) -> None: ...
    def transform(self) -> None: ...
    def visit_Break(self, node) -> None: ...
    def visit_Continue(self, node) -> None: ...

class BreakTransformOptimizer(BaseNodeVisitor):
    root: Incomplete
    def __init__(self, root) -> None: ...
    def transform(self) -> None: ...
    def visit_Break(self, node) -> None: ...
