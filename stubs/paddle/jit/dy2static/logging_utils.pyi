from .ast_utils import ast_to_source_code as ast_to_source_code
from paddle.base import log_helper as log_helper

VERBOSITY_ENV_NAME: str
CODE_LEVEL_ENV_NAME: str
DEFAULT_VERBOSITY: int
DEFAULT_CODE_LEVEL: int
LOG_AllTransformer: int

def synchronized(func): ...

class TranslatorLogger:
    def __new__(cls, *args, **kwargs): ...
    logger_name: str
    def __init__(self) -> None: ...
    @property
    def logger(self): ...
    @property
    def verbosity_level(self): ...
    @verbosity_level.setter
    def verbosity_level(self, level) -> None: ...
    @property
    def transformed_code_level(self): ...
    @transformed_code_level.setter
    def transformed_code_level(self, level) -> None: ...
    @property
    def need_to_echo_log_to_stdout(self): ...
    @need_to_echo_log_to_stdout.setter
    def need_to_echo_log_to_stdout(self, log_to_stdout) -> None: ...
    @property
    def need_to_echo_code_to_stdout(self): ...
    @need_to_echo_code_to_stdout.setter
    def need_to_echo_code_to_stdout(self, code_to_stdout) -> None: ...
    def check_level(self, level): ...
    def has_code_level(self, level): ...
    def has_verbosity(self, level): ...
    def error(self, msg, *args, **kwargs) -> None: ...
    def warn(self, msg, *args, **kwargs) -> None: ...
    def log(self, level, msg, *args, **kwargs) -> None: ...
    def log_transformed_code(self, level, ast_node, transformer_name, *args, **kwargs) -> None: ...

def set_verbosity(level: int = 0, also_to_stdout: bool = False) -> None: ...
def get_verbosity(): ...
def set_code_level(level=..., also_to_stdout: bool = False) -> None: ...
def get_code_level(): ...
def error(msg, *args, **kwargs) -> None: ...
def warn(msg, *args, **kwargs) -> None: ...
def log(level, msg, *args, **kwargs) -> None: ...
def log_transformed_code(level, ast_node, transformer_name, *args, **kwargs) -> None: ...
