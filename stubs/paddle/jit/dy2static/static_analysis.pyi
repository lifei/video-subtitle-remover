from .utils_helper import NodeVarType as NodeVarType, index_in_list as index_in_list, is_dygraph_api as is_dygraph_api, is_numpy_api as is_numpy_api, is_paddle_api as is_paddle_api
from _typeshed import Incomplete
from paddle.utils import gast as gast

class AstNodeWrapper:
    node: Incomplete
    parent: Incomplete
    children: Incomplete
    node_var_type: Incomplete
    def __init__(self, node) -> None: ...

class AstVarScope:
    SCOPE_TYPE_SCRIPT: int
    SCOPE_TYPE_FUNCTION: int
    SCOPE_TYPE_CLASS: int
    sub_scopes: Incomplete
    name_to_id: Incomplete
    id_to_type: Incomplete
    cur_id: int
    scope_name: Incomplete
    scope_type: Incomplete
    parent_scope: Incomplete
    def __init__(self, scope_name: str = '', scope_type=..., parent_scope: Incomplete | None = None) -> None: ...
    def add_var_type(self, var_name, node_var_type) -> None: ...
    def set_var_type(self, var_name, node_var_type) -> None: ...
    def get_var_type(self, var_name): ...

class AstVarEnv:
    cur_scope: Incomplete
    def __init__(self) -> None: ...
    def enter_scope(self, scope_name, scope_type): ...
    def exit_scope(self): ...
    def get_parent_scope(self): ...
    def add_var_type(self, var_name, node_var_type) -> None: ...
    def set_var_type(self, var_name, node_var_type) -> None: ...
    def get_var_type(self, var_name): ...
    def get_scope_var_type(self): ...

class StaticAnalysisVisitor:
    def __init__(self, ast_root: Incomplete | None = None) -> None: ...
    node_wrapper_root: Incomplete
    ancestor_wrappers: Incomplete
    node_to_wrapper_map: Incomplete
    var_env: Incomplete
    def run(self, ast_root) -> None: ...
    def dfs_visit(self, node): ...
    def get_node_wrapper_root(self): ...
    def get_node_to_wrapper_map(self): ...
    def get_var_env(self): ...
    def is_tensor_node(self, node): ...
