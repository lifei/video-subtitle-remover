from _typeshed import Incomplete
from paddle.base import unique_name as unique_name
from paddle.jit.dy2static.utils import FOR_ITER_INDEX_PREFIX as FOR_ITER_INDEX_PREFIX, FOR_ITER_ITERATOR_PREFIX as FOR_ITER_ITERATOR_PREFIX, FOR_ITER_TARGET_PREFIX as FOR_ITER_TARGET_PREFIX, FOR_ITER_VAR_LEN_PREFIX as FOR_ITER_VAR_LEN_PREFIX, FOR_ITER_VAR_NAME_PREFIX as FOR_ITER_VAR_NAME_PREFIX, FOR_ITER_ZIP_TO_LIST_PREFIX as FOR_ITER_ZIP_TO_LIST_PREFIX, ORIGI_INFO as ORIGI_INFO, ast_to_source_code as ast_to_source_code, create_assign_node as create_assign_node, get_attribute_full_name as get_attribute_full_name
from paddle.utils import gast as gast

class BaseTransformer(gast.NodeTransformer):
    def visit(self, node): ...

class RenameTransformer(BaseTransformer):
    root: Incomplete
    old_name: str
    new_name: str
    def __init__(self, node) -> None: ...
    def rename(self, old_name, new_name) -> None: ...
    def visit_Name(self, node): ...
    def visit_Attribute(self, node): ...

class NameNodeReplaceTransformer(BaseTransformer):
    target_name: Incomplete
    replace_node: Incomplete
    def __init__(self, root_node, target_name, replace_node) -> None: ...
    def visit_Name(self, node): ...
    def visit_Nonlocal(self, node): ...

class ForLoopTuplePreTransformer(BaseTransformer):
    root: Incomplete
    def __init__(self, root) -> None: ...
    def transform(self) -> None: ...
    def visit_For(self, node): ...
    def tuple_node_to_unpack_structure(self, node): ...
    def tuple_to_stmts(self, node, tuple_name): ...

class ForNodeVisitor:
    node: Incomplete
    target: Incomplete
    iter_args: Incomplete
    body: Incomplete
    iter_var_name: Incomplete
    iter_idx_name: Incomplete
    iter_var_len_name: Incomplete
    iter_zip_to_list_name: Incomplete
    iter_node: Incomplete
    enum_idx_name: Incomplete
    args_length: Incomplete
    def __init__(self, for_node) -> None: ...
    def parse(self): ...
    def is_for_range_iter(self): ...
    def is_for_iter(self): ...
    def is_for_enumerate_iter(self): ...
