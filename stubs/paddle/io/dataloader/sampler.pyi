from ...framework import core as core
from ...tensor import randperm as randperm
from _typeshed import Incomplete

class Sampler:
    data_source: Incomplete
    def __init__(self, data_source: Incomplete | None = None) -> None: ...
    def __iter__(self): ...

class SequenceSampler(Sampler):
    data_source: Incomplete
    def __init__(self, data_source) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class RandomSampler(Sampler):
    data_source: Incomplete
    replacement: Incomplete
    generator: Incomplete
    def __init__(self, data_source, replacement: bool = False, num_samples: Incomplete | None = None, generator: Incomplete | None = None) -> None: ...
    @property
    def num_samples(self): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class WeightedRandomSampler(Sampler):
    weights: Incomplete
    num_samples: Incomplete
    replacement: Incomplete
    def __init__(self, weights, num_samples, replacement: bool = True) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class SubsetRandomSampler(Sampler):
    indices: Incomplete
    def __init__(self, indices) -> None: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
