from ... import framework as framework
from _typeshed import Incomplete
from typing import Iterable

class Dataset:
    def __init__(self) -> None: ...
    def __getitem__(self, idx) -> None: ...
    def __len__(self) -> int: ...

class IterableDataset(Dataset):
    def __init__(self) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, idx) -> None: ...
    def __len__(self) -> int: ...

class TensorDataset(Dataset):
    tensors: Incomplete
    def __init__(self, tensors) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...

def to_list(value): ...

class ComposeDataset(Dataset):
    datasets: Incomplete
    def __init__(self, datasets) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, idx): ...

class ChainDataset(IterableDataset):
    datasets: Incomplete
    def __init__(self, datasets) -> None: ...
    def __iter__(self): ...

class Subset(Dataset):
    dataset: Incomplete
    indices: Incomplete
    def __init__(self, dataset, indices) -> None: ...
    def __getitem__(self, idx): ...
    def __len__(self) -> int: ...

def random_split(dataset, lengths, generator: Incomplete | None = None): ...

class ConcatDataset(Dataset):
    @staticmethod
    def cumsum(sequence): ...
    datasets: Incomplete
    cumulative_sizes: Incomplete
    def __init__(self, datasets: Iterable[Dataset]) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, idx): ...
