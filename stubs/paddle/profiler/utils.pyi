from _typeshed import Incomplete
from collections.abc import Generator
from contextlib import ContextDecorator
from paddle.base import core as core
from paddle.base.core import TracerEventType as TracerEventType
from typing import Any

class RecordEvent(ContextDecorator):
    name: Incomplete
    event_type: Incomplete
    event: Incomplete
    def __init__(self, name: str, event_type: TracerEventType = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any): ...
    def begin(self) -> None: ...
    def end(self) -> None: ...

def load_profiler_result(filename: str): ...
def in_profiler_mode(): ...
def wrap_optimizers(): ...
def job_schedule_profiler_range(iter_id, start, end, exit_after_prof: bool = True) -> Generator[Incomplete]: ...
