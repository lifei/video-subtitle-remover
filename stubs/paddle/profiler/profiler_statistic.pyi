from .statistic_helper import intersection_ranges as intersection_ranges, merge_ranges as merge_ranges, merge_self_ranges as merge_self_ranges, sum_ranges as sum_ranges
from _typeshed import Incomplete
from enum import Enum
from paddle.base.core import TracerEventType as TracerEventType, TracerMemEventType as TracerMemEventType
from paddle.utils.flops import flops as flops

class SortedKeys(Enum):
    CPUTotal = 0
    CPUAvg = 1
    CPUMax = 2
    CPUMin = 3
    GPUTotal = 4
    GPUAvg = 5
    GPUMax = 6
    GPUMin = 7

class HostStatisticNode:
    hostnode: Incomplete
    children_node: Incomplete
    runtime_node: Incomplete
    cpu_time: int
    self_cpu_time: int
    gpu_time: int
    self_gpu_time: int
    general_gpu_time: int
    self_general_gpu_time: int
    flops: int
    def __init__(self, hostnode) -> None: ...
    def cal_flops(self) -> None: ...
    def cal_statistic(self) -> None: ...
    @property
    def end_ns(self): ...
    @property
    def start_ns(self): ...
    def __getattr__(self, name): ...

def traverse_tree(nodetrees): ...
def get_device_nodes(hostnode): ...
def gen_layer_flops(nodetrees, repeat: int = 1): ...
def wrap_tree(nodetrees): ...

class TimeRangeSummary:
    CPUTimeRange: Incomplete
    GPUTimeRange: Incomplete
    CPUTimeRangeSum: Incomplete
    GPUTimeRangeSum: Incomplete
    call_times: Incomplete
    def __init__(self) -> None: ...
    def parse(self, nodetrees): ...
    def get_gpu_devices(self): ...
    def get_gpu_range_sum(self, device_id, event_type): ...
    def get_cpu_range_sum(self, event_type): ...

class DistributedSummary:
    cpu_communication_range: Incomplete
    gpu_communication_range: Incomplete
    communication_range: Incomplete
    computation_range: Incomplete
    overlap_range: Incomplete
    cpu_calls: int
    gpu_calls: int
    def __init__(self) -> None: ...
    def parse(self, nodetrees) -> None: ...

class EventSummary:
    class ItemBase:
        name: Incomplete
        call: int
        cpu_time: int
        gpu_time: int
        max_cpu_time: int
        min_cpu_time: Incomplete
        max_gpu_time: int
        min_gpu_time: Incomplete
        devices: Incomplete
        operator_inners: Incomplete
        general_gpu_time: int
        min_general_gpu_time: Incomplete
        max_general_gpu_time: int
        def __init__(self, name) -> None: ...
        @property
        def flops(self): ...
        @property
        def avg_cpu_time(self): ...
        @property
        def avg_gpu_time(self): ...
        @property
        def avg_general_gpu_time(self): ...
        def add_cpu_time(self, time) -> None: ...
        def add_gpu_time(self, time) -> None: ...
        def add_general_gpu_time(self, time) -> None: ...
        def add_call(self) -> None: ...
        def add_flops(self, flops) -> None: ...
        def add_item(self, node) -> None: ...
    class DeviceItem(ItemBase):
        def add_item(self, node) -> None: ...
    class OperatorItem(ItemBase):
        def add_item(self, node) -> None: ...
    class ForwardItem(ItemBase):
        def add_item(self, node) -> None: ...
    class GeneralItem(ItemBase):
        def add_item(self, node) -> None: ...
    items: Incomplete
    thread_items: Incomplete
    userdefined_items: Incomplete
    userdefined_thread_items: Incomplete
    model_perspective_items: Incomplete
    memory_manipulation_items: Incomplete
    kernel_items: Incomplete
    def __init__(self) -> None: ...
    def parse(self, nodetrees) -> None: ...
    def add_forward_item(self, operator_node) -> None: ...
    def add_operator_item(self, operator_node) -> None: ...
    def add_userdefined_item(self, userdefined_node) -> None: ...
    def add_memory_manipulation_item(self, memory_manipulation_node) -> None: ...
    def add_model_perspective_item(self, model_perspective_node) -> None: ...
    def add_kernel_item(self, root_node) -> None: ...

class MemorySummary:
    class MemoryItem:
        event_name: Incomplete
        place: Incomplete
        allocation_count: int
        free_count: int
        allocation_size: int
        free_size: int
        increase_size: int
        memory_type: Incomplete
        def __init__(self, event_name, place, memory_type: str = 'Allocated') -> None: ...
        def add_memory_record(self, size, allocation_type) -> None: ...
    allocated_items: Incomplete
    reserved_items: Incomplete
    peak_allocation_values: Incomplete
    peak_reserved_values: Incomplete
    def __init__(self) -> None: ...
    def parse(self, nodetrees) -> None: ...

class StatisticData:
    node_trees: Incomplete
    extra_info: Incomplete
    time_range_summary: Incomplete
    event_summary: Incomplete
    distributed_summary: Incomplete
    memory_summary: Incomplete
    def __init__(self, node_trees, extra_info) -> None: ...
