from ..base.data_feeder import check_dtype as check_dtype, check_type as check_type, check_variable_and_dtype as check_variable_and_dtype, convert_dtype as convert_dtype
from ..common_ops_import import Variable as Variable
from ..framework import LayerHelper as LayerHelper, convert_np_dtype_to_dtype_ as convert_np_dtype_to_dtype_, core as core, in_dynamic_mode as in_dynamic_mode, in_dynamic_or_pir_mode as in_dynamic_or_pir_mode, in_pir_mode as in_pir_mode
from .layer_function_generator import generate_layer_fn as generate_layer_fn, templatedoc as templatedoc
from .manipulation import cast as cast, cast_ as cast_
from .ops import abs as abs, abs_ as abs_, acos as acos, acos_ as acos_, acosh as acosh, acosh_ as acosh_, asin as asin, asin_ as asin_, asinh as asinh, asinh_ as asinh_, atan as atan, atan_ as atan_, atanh as atanh, atanh_ as atanh_, ceil as ceil, ceil_ as ceil_, cos as cos, cos_ as cos_, cosh as cosh, cosh_ as cosh_, erf as erf, erf_ as erf_, exp as exp, exp_ as exp_, expm1 as expm1, expm1_ as expm1_, floor as floor, floor_ as floor_, reciprocal as reciprocal, reciprocal_ as reciprocal_, round as round, round_ as round_, rsqrt as rsqrt, rsqrt_ as rsqrt_, sigmoid as sigmoid, sigmoid_ as sigmoid_, sin as sin, sin_ as sin_, sinh as sinh, sinh_ as sinh_, sqrt as sqrt, sqrt_ as sqrt_, square as square, square_ as square_, tan as tan, tan_ as tan_
from _typeshed import Incomplete
from paddle.base.libpaddle import DataType as DataType
from paddle.common_ops_import import VarDesc as VarDesc, dygraph_utils as dygraph_utils
from paddle.utils.inplace_utils import inplace_apis_in_dygraph_only as inplace_apis_in_dygraph_only

def log(x, name: Incomplete | None = None): ...
def log_(x, name: Incomplete | None = None): ...
def scale(x, scale: float = 1.0, bias: float = 0.0, bias_after_scale: bool = True, act: Incomplete | None = None, name: Incomplete | None = None): ...
def stanh(x, scale_a: float = 0.67, scale_b: float = 1.7159, name: Incomplete | None = None): ...
def multiplex(inputs, index, name: Incomplete | None = None): ...
def scale_(x, scale: float = 1.0, bias: float = 0.0, bias_after_scale: bool = True, act: Incomplete | None = None, name: Incomplete | None = None): ...
def pow(x, y, name: Incomplete | None = None): ...
def pow_(x, y, name: Incomplete | None = None): ...

OP_NAMEMAPPING: Incomplete

def add(x, y, name: Incomplete | None = None): ...
def add_(x, y, name: Incomplete | None = None): ...
def logaddexp(x, y, name: Incomplete | None = None): ...
def subtract(x, y, name: Incomplete | None = None): ...
def subtract_(x, y, name: Incomplete | None = None): ...
def divide(x, y, name: Incomplete | None = None): ...
def divide_(x, y, name: Incomplete | None = None): ...
def floor_divide(x, y, name: Incomplete | None = None): ...
def floor_divide_(x, y, name: Incomplete | None = None): ...
def remainder(x, y, name: Incomplete | None = None): ...
def remainder_(x, y, name: Incomplete | None = None): ...
mod = remainder
floor_mod = remainder
mod_ = remainder_
floor_mod_ = remainder_

def multiply(x, y, name: Incomplete | None = None): ...
def multiply_(x, y, name: Incomplete | None = None): ...
def maximum(x, y, name: Incomplete | None = None): ...
def minimum(x, y, name: Incomplete | None = None): ...
def fmax(x, y, name: Incomplete | None = None): ...
def fmin(x, y, name: Incomplete | None = None): ...
def sum(x, axis: Incomplete | None = None, dtype: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def nan_to_num(x, nan: float = 0.0, posinf: Incomplete | None = None, neginf: Incomplete | None = None, name: Incomplete | None = None): ...
def nan_to_num_(x, nan: float = 0.0, posinf: Incomplete | None = None, neginf: Incomplete | None = None, name: Incomplete | None = None): ...
def nansum(x, axis: Incomplete | None = None, dtype: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def nanmean(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def count_nonzero(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def add_n(inputs, name: Incomplete | None = None): ...
def trunc(input, name: Incomplete | None = None): ...
def trunc_(input, name: Incomplete | None = None): ...
def mm(input, mat2, name: Incomplete | None = None): ...
def addmm(input, x, y, beta: float = 1.0, alpha: float = 1.0, name: Incomplete | None = None): ...
def addmm_(input, x, y, beta: float = 1.0, alpha: float = 1.0, name: Incomplete | None = None): ...
def renorm(x, p, axis, max_norm): ...
def renorm_(x, p, axis, max_norm): ...
def inner(x, y, name: Incomplete | None = None): ...
def outer(x, y, name: Incomplete | None = None): ...
def logsumexp(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def inverse(x, name: Incomplete | None = None): ...
def max(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def min(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def amax(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def amin(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def log1p(x, name: Incomplete | None = None): ...
def log1p_(x, name: Incomplete | None = None): ...
def log2(x, name: Incomplete | None = None): ...
def log2_(x, name: Incomplete | None = None): ...
def log10(x, name: Incomplete | None = None): ...
def log10_(x, name: Incomplete | None = None): ...
def clip(x, min: Incomplete | None = None, max: Incomplete | None = None, name: Incomplete | None = None): ...
def clip_(x, min: Incomplete | None = None, max: Incomplete | None = None, name: Incomplete | None = None): ...
def trace(x, offset: int = 0, axis1: int = 0, axis2: int = 1, name: Incomplete | None = None): ...
def diagonal(x, offset: int = 0, axis1: int = 0, axis2: int = 1, name: Incomplete | None = None): ...
def kron(x, y, name: Incomplete | None = None): ...
def cumsum(x, axis: Incomplete | None = None, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def cumsum_(x, axis: Incomplete | None = None, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def cummax(x, axis: Incomplete | None = None, dtype: str = 'int64', name: Incomplete | None = None): ...
def cummin(x, axis: Incomplete | None = None, dtype: str = 'int64', name: Incomplete | None = None): ...
def logcumsumexp(x, axis: Incomplete | None = None, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def cumprod(x, dim: Incomplete | None = None, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def cumprod_(x, dim: Incomplete | None = None, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def isfinite(x, name: Incomplete | None = None): ...
def isinf(x, name: Incomplete | None = None): ...
def isnan(x, name: Incomplete | None = None): ...
def prod(x, axis: Incomplete | None = None, keepdim: bool = False, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def sign(x, name: Incomplete | None = None): ...
def tanh(x, name: Incomplete | None = None): ...
def tanh_(x, name: Incomplete | None = None): ...
def increment(x, value: float = 1.0, name: Incomplete | None = None): ...
def all(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def any(x, axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def broadcast_shape(x_shape, y_shape): ...
def conj(x, name: Incomplete | None = None): ...
def digamma(x, name: Incomplete | None = None): ...
def digamma_(x, name: Incomplete | None = None): ...
def lgamma(x, name: Incomplete | None = None): ...
def lgamma_(x, name: Incomplete | None = None): ...
def multigammaln(x, p, name: Incomplete | None = None): ...
def multigammaln_(x, p, name: Incomplete | None = None): ...
def neg(x, name: Incomplete | None = None): ...
def neg_(x, name: Incomplete | None = None): ...
def atan2(x, y, name: Incomplete | None = None): ...
def logit(x, eps: Incomplete | None = None, name: Incomplete | None = None): ...
def logit_(x, eps: Incomplete | None = None, name: Incomplete | None = None): ...
def lerp(x, y, weight, name: Incomplete | None = None): ...
def lerp_(x, y, weight, name: Incomplete | None = None): ...
def erfinv(x, name: Incomplete | None = None): ...
def erfinv_(x, name: Incomplete | None = None): ...
def rad2deg(x, name: Incomplete | None = None): ...
def deg2rad(x, name: Incomplete | None = None): ...
def gcd(x, y, name: Incomplete | None = None): ...
def gcd_(x, y, name: Incomplete | None = None): ...
def lcm(x, y, name: Incomplete | None = None): ...
def lcm_(x, y, name: Incomplete | None = None): ...
def diff(x, n: int = 1, axis: int = -1, prepend: Incomplete | None = None, append: Incomplete | None = None, name: Incomplete | None = None): ...
def angle(x, name: Incomplete | None = None): ...
def heaviside(x, y, name: Incomplete | None = None): ...
def frac(x, name: Incomplete | None = None): ...
def frac_(x, name: Incomplete | None = None): ...
def sgn(x, name: Incomplete | None = None): ...
def take(x, index, mode: str = 'raise', name: Incomplete | None = None): ...
def frexp(x, name: Incomplete | None = None): ...
def trapezoid(y, x: Incomplete | None = None, dx: Incomplete | None = None, axis: int = -1, name: Incomplete | None = None): ...
def cumulative_trapezoid(y, x: Incomplete | None = None, dx: Incomplete | None = None, axis: int = -1, name: Incomplete | None = None): ...
def vander(x, n: Incomplete | None = None, increasing: bool = False, name: Incomplete | None = None): ...
def nextafter(x, y, name: Incomplete | None = None): ...
def i0(x, name: Incomplete | None = None): ...
def i0_(x, name: Incomplete | None = None): ...
def i0e(x, name: Incomplete | None = None): ...
def i1(x, name: Incomplete | None = None): ...
def i1e(x, name: Incomplete | None = None): ...
def polygamma(x, n, name: Incomplete | None = None): ...
def polygamma_(x, n, name: Incomplete | None = None): ...
def ldexp(x, y, name: Incomplete | None = None): ...
def ldexp_(x, y, name: Incomplete | None = None): ...
def hypot(x, y, name: Incomplete | None = None): ...
def hypot_(x, y, name: Incomplete | None = None): ...
def combinations(x, r: int = 2, with_replacement: bool = False, name: Incomplete | None = None): ...
