from ..base.data_feeder import check_dtype as check_dtype, check_type as check_type, check_variable_and_dtype as check_variable_and_dtype, convert_dtype as convert_dtype, convert_float_to_uint16 as convert_float_to_uint16
from ..base.framework import Variable as Variable, device_guard as device_guard
from ..base.param_attr import ParamAttr as ParamAttr
from ..framework import LayerHelper as LayerHelper, convert_np_dtype_to_dtype_ as convert_np_dtype_to_dtype_, core as core, dygraph_only as dygraph_only, in_dynamic_mode as in_dynamic_mode, in_dynamic_or_pir_mode as in_dynamic_or_pir_mode, in_pir_mode as in_pir_mode
from _typeshed import Incomplete
from paddle.utils.inplace_utils import inplace_apis_in_dygraph_only as inplace_apis_in_dygraph_only

def create_global_var(shape, value, dtype, persistable: bool = False, force_cpu: bool = False, name: Incomplete | None = None): ...
def create_parameter(shape, dtype, name: Incomplete | None = None, attr: Incomplete | None = None, is_bias: bool = False, default_initializer: Incomplete | None = None): ...
def create_tensor(dtype, name: Incomplete | None = None, persistable: bool = False): ...
def linspace(start, stop, num, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def logspace(start, stop, num, base: float = 10.0, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def to_tensor(data, dtype: Incomplete | None = None, place: Incomplete | None = None, stop_gradient: bool = True): ...
def full_like(x, fill_value, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def fill_constant(shape, dtype, value, force_cpu: bool = False, out: Incomplete | None = None, name: Incomplete | None = None): ...
def ones(shape, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def ones_like(x, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def zeros(shape, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def zeros_like(x, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def eye(num_rows, num_columns: Incomplete | None = None, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def full(shape, fill_value, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def arange(start: int = 0, end: Incomplete | None = None, step: int = 1, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def tril(x, diagonal: int = 0, name: Incomplete | None = None): ...
def tril_(x, diagonal: int = 0, name: Incomplete | None = None): ...
def triu(x, diagonal: int = 0, name: Incomplete | None = None): ...
def triu_(x, diagonal: int = 0, name: Incomplete | None = None): ...
def meshgrid(*args, **kwargs): ...
def diag_embed(input, offset: int = 0, dim1: int = -2, dim2: int = -1): ...
def diagflat(x, offset: int = 0, name: Incomplete | None = None): ...
def diag(x, offset: int = 0, padding_value: int = 0, name: Incomplete | None = None): ...
def empty(shape, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def empty_like(x, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def assign(x, output: Incomplete | None = None): ...
def clone(x, name: Incomplete | None = None): ...
def complex(real, imag, name: Incomplete | None = None): ...
def tril_indices(row, col, offset: int = 0, dtype: str = 'int64'): ...
def triu_indices(row, col: Incomplete | None = None, offset: int = 0, dtype: str = 'int64'): ...
def polar(abs, angle, name: Incomplete | None = None): ...
def cauchy_(x, loc: int = 0, scale: int = 1, name: Incomplete | None = None): ...
def geometric_(x, probs, name: Incomplete | None = None): ...
