from ..base.data_feeder import check_dtype as check_dtype, check_shape as check_shape, check_type as check_type, check_variable_and_dtype as check_variable_and_dtype
from ..framework import LayerHelper as LayerHelper, convert_np_dtype_to_dtype_ as convert_np_dtype_to_dtype_, core as core, dygraph_only as dygraph_only
from _typeshed import Incomplete
from paddle.base.libpaddle import DataType as DataType
from paddle.common_ops_import import Variable as Variable
from paddle.framework import in_dynamic_mode as in_dynamic_mode, in_dynamic_or_pir_mode as in_dynamic_or_pir_mode, in_pir_mode as in_pir_mode

def bernoulli(x, name: Incomplete | None = None): ...
def poisson(x, name: Incomplete | None = None): ...
def multinomial(x, num_samples: int = 1, replacement: bool = False, name: Incomplete | None = None): ...
def uniform_random_batch_size_like(input, shape, dtype: str = 'float32', input_dim_idx: int = 0, output_dim_idx: int = 0, min: float = -1.0, max: float = 1.0, seed: int = 0): ...
def gaussian(shape, mean: float = 0.0, std: float = 1.0, seed: int = 0, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def gaussian_(x, mean: float = 0.0, std: float = 1.0, seed: int = 0, name: Incomplete | None = None): ...
def standard_normal(shape, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def randn(shape, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def normal(mean: float = 0.0, std: float = 1.0, shape: Incomplete | None = None, name: Incomplete | None = None): ...
def normal_(x, mean: float = 0.0, std: float = 1.0, name: Incomplete | None = None): ...
def uniform(shape, dtype: Incomplete | None = None, min: float = -1.0, max: float = 1.0, seed: int = 0, name: Incomplete | None = None): ...
def uniform_(x, min: float = -1.0, max: float = 1.0, seed: int = 0, name: Incomplete | None = None): ...
def randint(low: int = 0, high: Incomplete | None = None, shape=[1], dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def randint_like(x, low: int = 0, high: Incomplete | None = None, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def randperm(n, dtype: str = 'int64', name: Incomplete | None = None): ...
def rand(shape, dtype: Incomplete | None = None, name: Incomplete | None = None): ...
def exponential_(x, lam: float = 1.0, name: Incomplete | None = None): ...
