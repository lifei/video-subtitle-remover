from ..base.data_feeder import check_dtype as check_dtype, check_type as check_type, check_variable_and_dtype as check_variable_and_dtype
from ..common_ops_import import Variable as Variable
from ..framework import LayerHelper as LayerHelper, in_dynamic_mode as in_dynamic_mode, in_dynamic_or_pir_mode as in_dynamic_or_pir_mode
from .creation import full as full
from .manipulation import cast as cast
from _typeshed import Incomplete
from paddle.base.libpaddle import DataType as DataType
from paddle.common_ops_import import VarDesc as VarDesc
from paddle.utils.inplace_utils import inplace_apis_in_dygraph_only as inplace_apis_in_dygraph_only

K_DEFAULT_DIM: int

def transpose(x, perm, name: Incomplete | None = None): ...
def transpose_(x, perm, name: Incomplete | None = None): ...
def matmul(x, y, transpose_x: bool = False, transpose_y: bool = False, name: Incomplete | None = None): ...
def norm(x, p: str = 'fro', axis: Incomplete | None = None, keepdim: bool = False, name: Incomplete | None = None): ...
def dist(x, y, p: int = 2, name: Incomplete | None = None): ...
def cond(x, p: Incomplete | None = None, name: Incomplete | None = None): ...
def dot(x, y, name: Incomplete | None = None): ...
def cov(x, rowvar: bool = True, ddof: bool = True, fweights: Incomplete | None = None, aweights: Incomplete | None = None, name: Incomplete | None = None): ...
def t(input, name: Incomplete | None = None): ...
def t_(input, name: Incomplete | None = None): ...
def cross(x, y, axis: int = 9, name: Incomplete | None = None): ...
def cholesky(x, upper: bool = False, name: Incomplete | None = None): ...
def matrix_rank(x, tol: Incomplete | None = None, hermitian: bool = False, name: Incomplete | None = None): ...
def bmm(x, y, name: Incomplete | None = None): ...
def histogram(input, bins: int = 100, min: int = 0, max: int = 0, name: Incomplete | None = None): ...
def bincount(x, weights: Incomplete | None = None, minlength: int = 0, name: Incomplete | None = None): ...
def mv(x, vec, name: Incomplete | None = None): ...
def det(x, name: Incomplete | None = None): ...
def slogdet(x, name: Incomplete | None = None): ...
def svd(x, full_matrices: bool = False, name: Incomplete | None = None): ...
def pca_lowrank(x, q: Incomplete | None = None, center: bool = True, niter: int = 2, name: Incomplete | None = None): ...
def matrix_power(x, n, name: Incomplete | None = None): ...
def qr(x, mode: str = 'reduced', name: Incomplete | None = None): ...
def lu(x, pivot: bool = True, get_infos: bool = False, name: Incomplete | None = None): ...
def lu_unpack(x, y, unpack_ludata: bool = True, unpack_pivots: bool = True, name: Incomplete | None = None): ...
def eig(x, name: Incomplete | None = None): ...
def eigvals(x, name: Incomplete | None = None): ...
def multi_dot(x, name: Incomplete | None = None): ...
def eigh(x, UPLO: str = 'L', name: Incomplete | None = None): ...
def pinv(x, rcond: float = 1e-15, hermitian: bool = False, name: Incomplete | None = None): ...
def solve(x, y, name: Incomplete | None = None): ...
def triangular_solve(x, y, upper: bool = True, transpose: bool = False, unitriangular: bool = False, name: Incomplete | None = None): ...
def cholesky_solve(x, y, upper: bool = False, name: Incomplete | None = None): ...
def eigvalsh(x, UPLO: str = 'L', name: Incomplete | None = None): ...
def lstsq(x, y, rcond: Incomplete | None = None, driver: Incomplete | None = None, name: Incomplete | None = None): ...
def corrcoef(x, rowvar: bool = True, name: Incomplete | None = None): ...
def cdist(x, y, p: float = 2.0, compute_mode: str = 'use_mm_for_euclid_dist_if_necessary', name: Incomplete | None = None): ...
def householder_product(x, tau, name: Incomplete | None = None): ...
