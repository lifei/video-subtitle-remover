from ..ops import ConvNormActivation as ConvNormActivation
from _typeshed import Incomplete
from paddle import nn as nn
from paddle.nn import AdaptiveAvgPool2D as AdaptiveAvgPool2D, Linear as Linear, MaxPool2D as MaxPool2D
from paddle.utils.download import get_weights_path_from_url as get_weights_path_from_url

model_urls: Incomplete

def create_activation_layer(act): ...
def channel_shuffle(x, groups): ...

class InvertedResidual(nn.Layer):
    def __init__(self, in_channels, out_channels, stride, activation_layer=...) -> None: ...
    def forward(self, inputs): ...

class InvertedResidualDS(nn.Layer):
    def __init__(self, in_channels, out_channels, stride, activation_layer=...) -> None: ...
    def forward(self, inputs): ...

class ShuffleNetV2(nn.Layer):
    scale: Incomplete
    num_classes: Incomplete
    with_pool: Incomplete
    def __init__(self, scale: float = 1.0, act: str = 'relu', num_classes: int = 1000, with_pool: bool = True) -> None: ...
    def forward(self, inputs): ...

def shufflenet_v2_x0_25(pretrained: bool = False, **kwargs): ...
def shufflenet_v2_x0_33(pretrained: bool = False, **kwargs): ...
def shufflenet_v2_x0_5(pretrained: bool = False, **kwargs): ...
def shufflenet_v2_x1_0(pretrained: bool = False, **kwargs): ...
def shufflenet_v2_x1_5(pretrained: bool = False, **kwargs): ...
def shufflenet_v2_x2_0(pretrained: bool = False, **kwargs): ...
def shufflenet_v2_swish(pretrained: bool = False, **kwargs): ...
