from ..nn import Layer, Sequential
from _typeshed import Incomplete

__all__ = ['yolo_loss', 'yolo_box', 'prior_box', 'box_coder', 'deform_conv2d', 'DeformConv2D', 'distribute_fpn_proposals', 'generate_proposals', 'read_file', 'decode_jpeg', 'roi_pool', 'RoIPool', 'psroi_pool', 'PSRoIPool', 'roi_align', 'RoIAlign', 'nms', 'matrix_nms']

def yolo_loss(x, gt_box, gt_label, anchors, anchor_mask, class_num, ignore_thresh, downsample_ratio, gt_score: Incomplete | None = None, use_label_smooth: bool = True, name: Incomplete | None = None, scale_x_y: float = 1.0): ...
def yolo_box(x, img_size, anchors, class_num, conf_thresh, downsample_ratio, clip_bbox: bool = True, name: Incomplete | None = None, scale_x_y: float = 1.0, iou_aware: bool = False, iou_aware_factor: float = 0.5): ...
def prior_box(input, image, min_sizes, max_sizes: Incomplete | None = None, aspect_ratios=[1.0], variance=[0.1, 0.1, 0.2, 0.2], flip: bool = False, clip: bool = False, steps=[0.0, 0.0], offset: float = 0.5, min_max_aspect_ratios_order: bool = False, name: Incomplete | None = None): ...
def box_coder(prior_box, prior_box_var, target_box, code_type: str = 'encode_center_size', box_normalized: bool = True, axis: int = 0, name: Incomplete | None = None): ...
def deform_conv2d(x, offset, weight, bias: Incomplete | None = None, stride: int = 1, padding: int = 0, dilation: int = 1, deformable_groups: int = 1, groups: int = 1, mask: Incomplete | None = None, name: Incomplete | None = None): ...

class DeformConv2D(Layer):
    weight: Incomplete
    bias: Incomplete
    def __init__(self, in_channels, out_channels, kernel_size, stride: int = 1, padding: int = 0, dilation: int = 1, deformable_groups: int = 1, groups: int = 1, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None) -> None: ...
    def forward(self, x, offset, mask: Incomplete | None = None): ...

def distribute_fpn_proposals(fpn_rois, min_level, max_level, refer_level, refer_scale, pixel_offset: bool = False, rois_num: Incomplete | None = None, name: Incomplete | None = None): ...
def read_file(filename, name: Incomplete | None = None): ...
def decode_jpeg(x, mode: str = 'unchanged', name: Incomplete | None = None): ...
def psroi_pool(x, boxes, boxes_num, output_size, spatial_scale: float = 1.0, name: Incomplete | None = None): ...

class PSRoIPool(Layer):
    output_size: Incomplete
    spatial_scale: Incomplete
    def __init__(self, output_size, spatial_scale: float = 1.0) -> None: ...
    def forward(self, x, boxes, boxes_num): ...

def roi_pool(x, boxes, boxes_num, output_size, spatial_scale: float = 1.0, name: Incomplete | None = None): ...

class RoIPool(Layer):
    def __init__(self, output_size, spatial_scale: float = 1.0) -> None: ...
    def forward(self, x, boxes, boxes_num): ...
    def extra_repr(self): ...

def roi_align(x, boxes, boxes_num, output_size, spatial_scale: float = 1.0, sampling_ratio: int = -1, aligned: bool = True, name: Incomplete | None = None): ...

class RoIAlign(Layer):
    def __init__(self, output_size, spatial_scale: float = 1.0) -> None: ...
    def forward(self, x, boxes, boxes_num, aligned: bool = True): ...

class ConvNormActivation(Sequential):
    def __init__(self, in_channels, out_channels, kernel_size: int = 3, stride: int = 1, padding: Incomplete | None = None, groups: int = 1, norm_layer=..., activation_layer=..., dilation: int = 1, bias: Incomplete | None = None) -> None: ...

def nms(boxes, iou_threshold: float = 0.3, scores: Incomplete | None = None, category_idxs: Incomplete | None = None, categories: Incomplete | None = None, top_k: Incomplete | None = None): ...
def generate_proposals(scores, bbox_deltas, img_size, anchors, variances, pre_nms_top_n: int = 6000, post_nms_top_n: int = 1000, nms_thresh: float = 0.5, min_size: float = 0.1, eta: float = 1.0, pixel_offset: bool = False, return_rois_num: bool = False, name: Incomplete | None = None): ...
def matrix_nms(bboxes, scores, score_threshold, post_threshold, nms_top_k, keep_top_k, use_gaussian: bool = False, gaussian_sigma: float = 2.0, background_label: int = 0, normalized: bool = True, return_index: bool = False, return_rois_num: bool = True, name: Incomplete | None = None): ...
