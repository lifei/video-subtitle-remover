from _typeshed import Incomplete
from paddle.base import core as core

def with_mateclass(meta, *bases): ...

class PyLayerContext:
    container: Incomplete
    def save_for_backward(self, *tensors) -> None: ...
    def saved_tensor(self): ...
    not_inplace_tensors: Incomplete
    def mark_not_inplace(self, *args) -> None: ...
    non_differentiable: Incomplete
    def mark_non_differentiable(self, *args) -> None: ...
    materialize_grads: Incomplete
    def set_materialize_grads(self, value: bool): ...

class PyLayerBackward(core.eager.PyLayer, PyLayerContext):
    def backward(self, *args): ...

class PyLayerMeta(type):
    def __init__(cls, name, bases, attrs) -> None: ...

class PyLayer(Incomplete):
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args) -> None: ...

def once_differentiable(backward): ...
