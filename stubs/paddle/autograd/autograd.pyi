import paddle
from _typeshed import Incomplete
from paddle.base import framework as framework

def as_tensors(xs): ...

class Jacobian:
    def __init__(self, ys, xs, is_batched: bool = False) -> None: ...
    @property
    def shape(self): ...
    def __getitem__(self, indexes): ...
    def __getattr__(self, __name: str): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __div__(self, other): ...
    def __truediv__(self, other): ...
    def __pow__(self, other): ...
    def __mod__(self, other): ...
    def __floordiv__(self, other): ...
    def __matmul__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class Hessian(Jacobian): ...

class _Jacobian:
    original_xs_shape: Incomplete
    original_ys_shape: Incomplete
    def __init__(self, ys, xs) -> None: ...
    def __getitem__(self, indexes): ...

class _JacobianNoBatch(_Jacobian):
    is_batched: bool
    inner_shape: Incomplete
    shape: Incomplete
    def __init__(self, ys, xs) -> None: ...

class _JacobianBatchFirst(_Jacobian):
    is_batched: bool
    inner_shape: Incomplete
    shape: Incomplete
    def __init__(self, ys, xs) -> None: ...

def jacobian(ys: paddle.Tensor | tuple[paddle.Tensor, ...], xs: paddle.Tensor | tuple[paddle.Tensor, ...], batch_axis: int | None = None) -> tuple[tuple[Jacobian, ...], ...] | tuple[Jacobian, ...] | Jacobian: ...
def hessian(ys: paddle.Tensor, xs: paddle.Tensor | tuple[paddle.Tensor, ...], batch_axis: int | None = None) -> tuple[tuple[Hessian, ...], ...] | Hessian: ...
