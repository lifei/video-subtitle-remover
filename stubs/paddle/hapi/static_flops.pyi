from _typeshed import Incomplete
from paddle.static import Program as Program, Variable as Variable

class VarWrapper:
    def __init__(self, var, graph) -> None: ...
    def name(self): ...
    def shape(self): ...

class OpWrapper:
    def __init__(self, op, graph) -> None: ...
    def type(self): ...
    def inputs(self, name): ...
    def outputs(self, name): ...

class GraphWrapper:
    program: Incomplete
    persistables: Incomplete
    teacher_persistables: Incomplete
    compiled_graph: Incomplete
    in_nodes: Incomplete
    out_nodes: Incomplete
    def __init__(self, program: Incomplete | None = None, in_nodes=[], out_nodes=[]) -> None: ...
    def ops(self): ...
    def var(self, name): ...

def count_convNd(op): ...
def count_leaky_relu(op): ...
def count_bn(op): ...
def count_linear(op): ...
def count_pool2d(op): ...
def count_element_op(op): ...
def static_flops(program, print_detail: bool = False): ...

class Table:
    table_heads: Incomplete
    table_len: Incomplete
    data: Incomplete
    col_num: Incomplete
    def __init__(self, table_heads) -> None: ...
    def add_row(self, row_str) -> None: ...
    def print_row(self, row) -> None: ...
    def print_shelf(self) -> None: ...
    def print_table(self) -> None: ...
