from .progressbar import ProgressBar as ProgressBar
from _typeshed import Incomplete
from paddle.utils import try_import as try_import

def config_callbacks(callbacks: Incomplete | None = None, model: Incomplete | None = None, batch_size: Incomplete | None = None, epochs: Incomplete | None = None, steps: Incomplete | None = None, log_freq: int = 2, verbose: int = 2, save_freq: int = 1, save_dir: Incomplete | None = None, metrics: Incomplete | None = None, mode: str = 'train'): ...

class CallbackList:
    callbacks: Incomplete
    params: Incomplete
    model: Incomplete
    def __init__(self, callbacks: Incomplete | None = None) -> None: ...
    def append(self, callback) -> None: ...
    def __iter__(self): ...
    def set_params(self, params) -> None: ...
    def set_model(self, model) -> None: ...
    def on_begin(self, mode, logs: Incomplete | None = None) -> None: ...
    def on_end(self, mode, logs: Incomplete | None = None) -> None: ...
    def on_epoch_begin(self, epoch: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...
    def on_epoch_end(self, epoch: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...
    def on_batch_begin(self, mode, step: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...
    def on_batch_end(self, mode, step: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...

class Callback:
    model: Incomplete
    params: Incomplete
    def __init__(self) -> None: ...
    def set_params(self, params) -> None: ...
    def set_model(self, model) -> None: ...
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_train_end(self, logs: Incomplete | None = None) -> None: ...
    def on_eval_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_eval_end(self, logs: Incomplete | None = None) -> None: ...
    def on_predict_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_predict_end(self, logs: Incomplete | None = None) -> None: ...
    def on_epoch_begin(self, epoch, logs: Incomplete | None = None) -> None: ...
    def on_epoch_end(self, epoch, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_begin(self, step, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_end(self, step, logs: Incomplete | None = None) -> None: ...
    def on_eval_batch_begin(self, step, logs: Incomplete | None = None) -> None: ...
    def on_eval_batch_end(self, step, logs: Incomplete | None = None) -> None: ...
    def on_predict_batch_begin(self, step, logs: Incomplete | None = None) -> None: ...
    def on_predict_batch_end(self, step, logs: Incomplete | None = None) -> None: ...

class ProgBarLogger(Callback):
    epochs: Incomplete
    steps: Incomplete
    progbar: Incomplete
    verbose: Incomplete
    log_freq: Incomplete
    def __init__(self, log_freq: int = 1, verbose: int = 2) -> None: ...
    train_metrics: Incomplete
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    epoch: Incomplete
    train_step: int
    train_progbar: Incomplete
    def on_epoch_begin(self, epoch: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_begin(self, step, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_end(self, step, logs: Incomplete | None = None) -> None: ...
    def on_epoch_end(self, epoch, logs: Incomplete | None = None) -> None: ...
    eval_steps: Incomplete
    eval_metrics: Incomplete
    eval_step: int
    evaled_samples: int
    eval_progbar: Incomplete
    def on_eval_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_eval_batch_begin(self, step, logs: Incomplete | None = None) -> None: ...
    def on_eval_batch_end(self, step, logs: Incomplete | None = None) -> None: ...
    test_steps: Incomplete
    test_metrics: Incomplete
    test_step: int
    tested_samples: int
    test_progbar: Incomplete
    def on_predict_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_predict_batch_begin(self, step, logs: Incomplete | None = None) -> None: ...
    def on_predict_batch_end(self, step, logs: Incomplete | None = None) -> None: ...
    def on_eval_end(self, logs: Incomplete | None = None) -> None: ...
    def on_predict_end(self, logs: Incomplete | None = None) -> None: ...

class ModelCheckpoint(Callback):
    save_freq: Incomplete
    save_dir: Incomplete
    def __init__(self, save_freq: int = 1, save_dir: Incomplete | None = None) -> None: ...
    epoch: Incomplete
    def on_epoch_begin(self, epoch: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...
    def on_epoch_end(self, epoch, logs: Incomplete | None = None) -> None: ...
    def on_train_end(self, logs: Incomplete | None = None) -> None: ...

class LRScheduler(Callback):
    by_step: Incomplete
    by_epoch: Incomplete
    def __init__(self, by_step: bool = True, by_epoch: bool = False) -> None: ...
    def on_epoch_end(self, epoch, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_end(self, step, logs: Incomplete | None = None) -> None: ...

class EarlyStopping(Callback):
    monitor: Incomplete
    patience: Incomplete
    verbose: Incomplete
    baseline: Incomplete
    min_delta: Incomplete
    wait_epoch: int
    best_weights: Incomplete
    stopped_epoch: int
    save_best_model: Incomplete
    save_dir: Incomplete
    monitor_op: Incomplete
    def __init__(self, monitor: str = 'loss', mode: str = 'auto', patience: int = 0, verbose: int = 1, min_delta: int = 0, baseline: Incomplete | None = None, save_best_model: bool = True) -> None: ...
    best_value: Incomplete
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_eval_end(self, logs: Incomplete | None = None) -> None: ...

class VisualDL(Callback):
    log_dir: Incomplete
    epochs: Incomplete
    steps: Incomplete
    epoch: int
    def __init__(self, log_dir) -> None: ...
    train_metrics: Incomplete
    train_step: int
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_epoch_begin(self, epoch: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_end(self, step, logs: Incomplete | None = None) -> None: ...
    eval_steps: Incomplete
    eval_metrics: Incomplete
    eval_step: int
    evaled_samples: int
    def on_eval_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_train_end(self, logs: Incomplete | None = None) -> None: ...
    def on_eval_end(self, logs: Incomplete | None = None) -> None: ...

class WandbCallback(Callback):
    wandb: Incomplete
    wandb_args: Incomplete
    def __init__(self, project: Incomplete | None = None, entity: Incomplete | None = None, name: Incomplete | None = None, dir: Incomplete | None = None, mode: Incomplete | None = None, job_type: Incomplete | None = None, **kwargs) -> None: ...
    @property
    def run(self): ...
    epochs: Incomplete
    train_metrics: Incomplete
    train_step: int
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    steps: Incomplete
    epoch: Incomplete
    def on_epoch_begin(self, epoch, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_end(self, step, logs: Incomplete | None = None) -> None: ...
    eval_steps: Incomplete
    eval_metrics: Incomplete
    eval_step: int
    evaled_samples: int
    def on_eval_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_train_end(self, logs: Incomplete | None = None) -> None: ...
    def on_eval_end(self, logs: Incomplete | None = None) -> None: ...

class ReduceLROnPlateau(Callback):
    monitor: Incomplete
    factor: Incomplete
    min_lr: Incomplete
    min_delta: Incomplete
    patience: Incomplete
    verbose: Incomplete
    cooldown: Incomplete
    cooldown_counter: int
    wait: int
    best: int
    mode: Incomplete
    monitor_op: Incomplete
    epoch: int
    def __init__(self, monitor: str = 'loss', factor: float = 0.1, patience: int = 10, verbose: int = 1, mode: str = 'auto', min_delta: float = 0.0001, cooldown: int = 0, min_lr: int = 0) -> None: ...
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_eval_end(self, logs: Incomplete | None = None) -> None: ...
    def in_cooldown(self): ...
