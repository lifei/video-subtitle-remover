from _typeshed import Incomplete
from paddle.base.data_feeder import check_type as check_type, convert_dtype as convert_dtype
from paddle.base.framework import Variable as Variable
from paddle.distribution import distribution as distribution
from paddle.framework import in_dynamic_mode as in_dynamic_mode
from paddle.tensor import random as random

class Normal(distribution.Distribution):
    all_arg_is_float: bool
    name: Incomplete
    dtype: str
    loc: Incomplete
    scale: Incomplete
    def __init__(self, loc, scale, name: Incomplete | None = None) -> None: ...
    @property
    def mean(self): ...
    @property
    def variance(self): ...
    def sample(self, shape=(), seed: int = 0): ...
    def rsample(self, shape=()): ...
    def entropy(self): ...
    def log_prob(self, value): ...
    def probs(self, value): ...
    def kl_divergence(self, other): ...
