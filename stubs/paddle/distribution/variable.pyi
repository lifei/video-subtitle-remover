from _typeshed import Incomplete
from paddle.distribution import constraint as constraint

class Variable:
    def __init__(self, is_discrete: bool = False, event_rank: int = 0, constraint: Incomplete | None = None) -> None: ...
    @property
    def is_discrete(self): ...
    @property
    def event_rank(self): ...
    def constraint(self, value): ...

class Real(Variable):
    def __init__(self, event_rank: int = 0) -> None: ...

class Positive(Variable):
    def __init__(self, event_rank: int = 0) -> None: ...

class Independent(Variable):
    def __init__(self, base, reinterpreted_batch_rank) -> None: ...
    def constraint(self, value): ...

class Stack(Variable):
    def __init__(self, vars, axis: int = 0) -> None: ...
    @property
    def is_discrete(self): ...
    @property
    def event_rank(self): ...
    def constraint(self, value): ...

real: Incomplete
positive: Incomplete
