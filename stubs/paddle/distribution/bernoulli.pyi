from _typeshed import Incomplete
from paddle.base.data_feeder import check_type as check_type, convert_dtype as convert_dtype
from paddle.base.framework import Variable as Variable
from paddle.distribution import exponential_family as exponential_family
from paddle.framework import in_dynamic_mode as in_dynamic_mode
from paddle.nn.functional import binary_cross_entropy_with_logits as binary_cross_entropy_with_logits, sigmoid as sigmoid, softplus as softplus

EPS: Incomplete

class Bernoulli(exponential_family.ExponentialFamily):
    name: Incomplete
    probs: Incomplete
    dtype: Incomplete
    logits: Incomplete
    def __init__(self, probs, name: Incomplete | None = None) -> None: ...
    @property
    def mean(self): ...
    @property
    def variance(self): ...
    def sample(self, shape): ...
    def rsample(self, shape, temperature: float = 1.0): ...
    def cdf(self, value): ...
    def log_prob(self, value): ...
    def prob(self, value): ...
    def entropy(self): ...
    def kl_divergence(self, other): ...
