from .pass_base import PassBase as PassBase, PassType as PassType, register_pass as register_pass
from _typeshed import Incomplete
from paddle.framework import core as core
from paddle.utils import unique_name as unique_name

def find_adjacent_match_sequences(iterable, filter_func, adjacent_filter_func: Incomplete | None = None): ...
def insert_fuse_all_reduce_ops(block, reversed_op_indices, input_var_names, output_var_names, dtype, attrs): ...
def has_same_attrs(op1, op2, attr_names): ...
def filter_all_collective_op_indices(block): ...
def find_all_fuse_all_reduce_groups(block): ...
def split_fuse_all_reduce_groups_by_deps(block, groups, op_deps): ...
def insert_coalesce_tensor_ops(block, coalesce_ops_kwargs): ...
def insert_fuse_all_reduce_by_memory_size(block, groups, max_memory_size) -> None: ...

class FuseAllReducePass(PassBase):
    def __init__(self) -> None: ...
