import abc
from _typeshed import Incomplete
from abc import ABC

class PassContext:
    def __init__(self) -> None: ...
    def set_attr(self, key, value) -> None: ...
    def get_attr(self, key, default: Incomplete | None = None): ...
    @property
    def passes(self): ...

class PassType:
    UNKNOWN: int
    COMM_OPT: int
    CALC_OPT: int
    PARALLEL_OPT: int
    FUSION_OPT: int

class PassBase(ABC, metaclass=abc.ABCMeta):
    name: Incomplete
    def __init__(self) -> None: ...
    def set_attr(self, key, value): ...
    def get_attr(self, key, default: Incomplete | None = None): ...
    def apply(self, main_programs, startup_programs, context: Incomplete | None = None): ...

def register_pass(name): ...
def new_pass(name, pass_attrs={}): ...

class CPPPassWrapper(PassBase):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self) -> None: ...
    @property
    def cpp_attr_types(self): ...

class PassManager:
    def __init__(self, passes, context: Incomplete | None = None, auto_solve_conflict: bool = True) -> None: ...
    def apply(self, main_programs, startup_programs): ...
    @property
    def context(self): ...
    @property
    def names(self): ...
    @property
    def passes(self): ...
