from .pass_base import CPPPassWrapper as CPPPassWrapper, PassType as PassType, register_pass as register_pass
from paddle.framework import core as core
from paddle.static import Executor as Executor

class FuseElementwiseAddActPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseBatchNormActPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseBatchNormAddActPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseReluDepthwiseConvPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FusedAttentionPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FusedFeedforwardPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseGemmEpiloguePass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseAdamWPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class FuseOptimizerPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class InplaceAddtoOpPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...

class BuildCINNPass(CPPPassWrapper):
    def __init__(self) -> None: ...
    @property
    def cpp_name(self): ...
