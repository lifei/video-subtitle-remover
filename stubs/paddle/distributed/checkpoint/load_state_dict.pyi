from .metadata import LocalTensorIndex as LocalTensorIndex, LocalTensorMetadata as LocalTensorMetadata
from .utils import compute_local_shape_and_global_offset as compute_local_shape_and_global_offset, flatten_state_dict as flatten_state_dict
from _typeshed import Incomplete
from dataclasses import dataclass
from paddle.distributed.communication.group import is_initialized as is_initialized
from paddle.distributed.fleet.utils.log_util import logger as logger

@dataclass(frozen=True)
class ReadItem:
    local_tensor_index: LocalTensorIndex
    rank: int
    cur_offset: tuple[int]
    storage_offset: tuple[int]
    lengths: tuple[int]

def get_rank_to_files(path, state_dict, process_group, use_dist): ...
def get_local_load_files(rank_to_files): ...
def get_load_infos(path, local_load_files, process_group, use_dist): ...
def compute_overlap(cur_chunk_metadata: LocalTensorMetadata, storage_local_tensor_metadata: LocalTensorMetadata): ...
def not_overlap(cur_chunk_metadata: LocalTensorMetadata, storage_local_tensor_metadata: LocalTensorMetadata): ...
def get_read_items(path, state_dict, process_group, use_dist): ...
def load_state_dict(state_dict, path, process_group: Incomplete | None = None, coordinator_rank: int = 0) -> None: ...
