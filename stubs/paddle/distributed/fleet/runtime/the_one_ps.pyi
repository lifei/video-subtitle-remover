from ..base.private_helper_function import wait_server_ready as wait_server_ready
from .runtime_base import RuntimeBase as RuntimeBase
from _typeshed import Incomplete
from paddle import base as base
from paddle.base import core as core
from paddle.base.compiler import CompiledProgram as CompiledProgram
from paddle.base.executor import Executor as Executor
from paddle.base.framework import Program as Program

def conv_indent(indent): ...

PSERVER_SAVE_SUFFIX: str

def parse_table_class(varname, o_main_program): ...
def get_default_accessor_proto(accessor, varname, o_main_program) -> None: ...
def check_embedding_dim(accessor, varname, o_main_program) -> None: ...

class Accessor:
    accessor_class: str
    optimizer: Incomplete
    feature_dim: int
    embedding_dim: int
    def __init__(self) -> None: ...
    def to_string(self, indent): ...

class CommonAccessor:
    accessor_class: str
    table_name: Incomplete
    entry: Incomplete
    attrs: Incomplete
    params: Incomplete
    dims: Incomplete
    trainer_num: int
    sync: str
    table_num: Incomplete
    table_dim: Incomplete
    initializers: Incomplete
    opt_input_map: Incomplete
    opt_attr_map: Incomplete
    opt_init_map: Incomplete
    def __init__(self) -> None: ...
    def define_optimize_map(self) -> None: ...
    def parse_entry(self, varname, o_main_program) -> None: ...
    def get_shard(self, total_dim, shard_num, pserver_id): ...
    def get_initializer_attr(self, value_name, o_startup_program): ...
    def parse_by_optimizer(self, grad_name, is_sparse, size, single_dim, compiled_strategy, adam_d2sum) -> None: ...
    def to_string(self, indent): ...

class Tensor:
    main_program_id: Incomplete
    startup_program_id: Incomplete
    feed_var_name: Incomplete
    fetch_var_name: Incomplete
    tensor_table_class: bool
    def __init__(self) -> None: ...
    def to_string(self, indent): ...

class Table:
    id: int
    table_class: Incomplete
    shard_num: int
    type: Incomplete
    accessor: Incomplete
    common: Incomplete
    tensor: Incomplete
    accessor_proto: Incomplete
    def __init__(self) -> None: ...
    def to_string(self, indent): ...

class Service:
    server_class: str
    client_class: str
    service_class: str
    start_server_port: int
    server_thread_num: int
    def __init__(self) -> None: ...
    def to_string(self, indent): ...

class DownpourServer:
    service: Incomplete
    tables: Incomplete
    def __init__(self) -> None: ...
    def set_service_param(self, service) -> None: ...
    def append_tables(self, table) -> None: ...
    def to_string(self, indent): ...

class Server:
    servers: Incomplete
    def __init__(self) -> None: ...
    def add_server(self, server) -> None: ...

class DownpourWorker:
    tables: Incomplete
    def __init__(self) -> None: ...
    def append_tables(self, table) -> None: ...
    def to_string(self, indent): ...

class Worker:
    workers: Incomplete
    def __init__(self) -> None: ...
    def add_worker(self, worker) -> None: ...

class fsClient:
    proto: Incomplete
    uri: Incomplete
    user: Incomplete
    passwd: Incomplete
    hadoop_bin: Incomplete
    def __init__(self, proto) -> None: ...
    def to_string(self): ...

class TheOnePSRuntime(RuntimeBase):
    def __init__(self) -> None: ...
    def build_compiled_startegy(self): ...
    def load_model(self, path, mode) -> None: ...
