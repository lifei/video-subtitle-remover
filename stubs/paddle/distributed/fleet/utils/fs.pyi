import abc
from .log_util import logger as logger
from _typeshed import Incomplete
from paddle.base import core as core

class ExecuteError(Exception): ...
class FSFileExistsError(Exception): ...
class FSFileNotExistsError(Exception): ...
class FSTimeOut(Exception): ...
class FSShellCmdAborted(ExecuteError): ...

class FS(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ls_dir(self, fs_path): ...
    @abc.abstractmethod
    def is_file(self, fs_path): ...
    @abc.abstractmethod
    def is_dir(self, fs_path): ...
    @abc.abstractmethod
    def is_exist(self, fs_path): ...
    @abc.abstractmethod
    def upload(self, local_path, fs_path): ...
    @abc.abstractmethod
    def download(self, fs_path, local_path): ...
    @abc.abstractmethod
    def mkdirs(self, fs_path): ...
    @abc.abstractmethod
    def delete(self, fs_path): ...
    @abc.abstractmethod
    def need_upload_download(self): ...
    @abc.abstractmethod
    def rename(self, fs_src_path, fs_dst_path): ...
    @abc.abstractmethod
    def mv(self, fs_src_path, fs_dst_path, overwrite: bool = False, test_exists: bool = False): ...
    @abc.abstractmethod
    def upload_dir(self, local_dir, dest_dir): ...
    @abc.abstractmethod
    def list_dirs(self, fs_path): ...
    @abc.abstractmethod
    def touch(self, fs_path, exist_ok: bool = True): ...
    @abc.abstractmethod
    def cat(self, fs_path: Incomplete | None = None): ...

class LocalFS(FS, metaclass=abc.ABCMeta):
    def ls_dir(self, fs_path): ...
    def mkdirs(self, fs_path) -> None: ...
    def rename(self, fs_src_path, fs_dst_path) -> None: ...
    def delete(self, fs_path): ...
    def need_upload_download(self): ...
    def is_file(self, fs_path): ...
    def is_dir(self, fs_path): ...
    def is_exist(self, fs_path): ...
    def touch(self, fs_path, exist_ok: bool = True) -> None: ...
    def mv(self, src_path, dst_path, overwrite: bool = False, test_exists: bool = False): ...
    def list_dirs(self, fs_path): ...

class HDFSClient(FS, metaclass=abc.ABCMeta):
    pre_commands: Incomplete
    def __init__(self, hadoop_home, configs, time_out=..., sleep_inter: int = 1000) -> None: ...
    def list_dirs(self, fs_path): ...
    def ls_dir(self, fs_path): ...
    def is_dir(self, fs_path): ...
    def is_file(self, fs_path): ...
    def is_exist(self, fs_path): ...
    def upload_dir(self, local_dir, dest_dir, overwrite: bool = False) -> None: ...
    def upload(self, local_path, fs_path, multi_processes: int = 5, overwrite: bool = False): ...
    def download(self, fs_path, local_path, multi_processes: int = 5, overwrite: bool = False): ...
    def mkdirs(self, fs_path) -> None: ...
    def mv(self, fs_src_path, fs_dst_path, overwrite: bool = False, test_exists: bool = True): ...
    def delete(self, fs_path): ...
    def touch(self, fs_path, exist_ok: bool = True): ...
    def need_upload_download(self): ...
    def cat(self, fs_path: Incomplete | None = None): ...
    def list_files_info(self, path_list): ...

class AFSClient(FS, metaclass=abc.ABCMeta):
    def __init__(self, time_out=..., sleep_inter: int = 1000) -> None: ...
    def init(self, fs_name, fs_user, fs_passwd, fs_conf) -> None: ...
    def list_dirs(self, fs_path): ...
    def ls_dir(self, fs_path): ...
    def is_dir(self, fs_path): ...
    def is_file(self, fs_path): ...
    def is_exist(self, fs_path): ...
    def upload_dir(self, local_dir, dest_dir, overwrite: bool = False) -> None: ...
    def upload(self, local_path, fs_path, multi_processes: int = 1, overwrite: bool = False) -> None: ...
    def download(self, fs_path, local_path, multi_processes: int = 1, overwrite: bool = False): ...
    def mkdirs(self, fs_path) -> None: ...
    def mv(self, fs_src_path, fs_dst_path, overwrite: bool = False, test_exists: bool = True) -> None: ...
    def delete(self, fs_path) -> None: ...
    def touch(self, fs_path, exist_ok: bool = True): ...
    def need_upload_download(self): ...
    def cat(self, fs_path: Incomplete | None = None): ...
