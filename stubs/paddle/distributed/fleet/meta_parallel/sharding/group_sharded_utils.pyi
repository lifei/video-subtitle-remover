from _typeshed import Incomplete
from collections.abc import Generator
from enum import Enum
from paddle.base import core as core
from paddle.base.dygraph import to_variable as to_variable
from paddle.common_ops_import import dygraph_only as dygraph_only
from paddle.nn import clip as clip

class Taskflow:
    task: Incomplete
    callback: Incomplete
    def __init__(self, task, callback) -> None: ...

class Type(Enum):
    fp16 = ...
    bf16 = ...
    fp32 = ...

class GroupShardedClipGrad:
    def __init__(self, clip, device, group) -> None: ...
    def __getattr__(self, item): ...
    def __call__(self, params_grads): ...

def device_guard(dev_id: int = 0, device: str = 'cpu') -> Generator[None]: ...
def GroupShardedScaler(scaler): ...
def cvt_to_device(x, dev_id, blocking: bool = True): ...
