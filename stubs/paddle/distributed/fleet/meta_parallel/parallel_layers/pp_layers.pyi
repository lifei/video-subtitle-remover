from ...utils.log_util import layer_to_str as layer_to_str, logger as logger
from _typeshed import Incomplete
from paddle import framework as framework, nn as nn
from paddle.incubate.distributed.fleet import recompute_hybrid as recompute_hybrid

class LayerDesc:
    layer_func: Incomplete
    inputs: Incomplete
    kwargs: Incomplete
    def __init__(self, layer_func, *inputs, **kwargs) -> None: ...
    def build_layer(self): ...

class SharedLayerDesc(LayerDesc):
    layer_name: Incomplete
    forward_func: Incomplete
    shared_weight_attr: Incomplete
    def __init__(self, key, layer_func, forward_func: Incomplete | None = None, shared_weight_attr: str = 'weight', *inputs, **kwargs) -> None: ...

class SegmentLayers:
    method: Incomplete
    num_parts: Incomplete
    num_items: Incomplete
    num_virtual_pipeline_stage: Incomplete
    total_parts: Incomplete
    def __init__(self, layers_desc, num_parts, method: str = 'uniform', num_virtual_pipeline_stage: Incomplete | None = None) -> None: ...
    def do_segment(self): ...
    def uniform(self, num_items, num_parts): ...

class PipelineLayerChunk(nn.Layer):
    run_function: Incomplete
    def __init__(self) -> None: ...
    def append(self, sublayer) -> None: ...
    def get_run_function(self): ...
    def forward(self, *args, **kwargs) -> None: ...

class PipelineLayer(nn.Layer):
    device_id: Incomplete
    layers: Incomplete
    recompute_ctx: Incomplete
    global_rank: Incomplete
    shared_layers: Incomplete
    shared_weight_attrs: Incomplete
    run_function: Incomplete
    shared_comm: Incomplete
    def __init__(self, layers, num_stages: Incomplete | None = None, topology: Incomplete | None = None, loss_fn: Incomplete | None = None, seg_method: str = 'uniform', recompute_interval: int = 0, recompute_ctx: Incomplete | None = None, num_virtual_pipeline_stages: Incomplete | None = None) -> None: ...
    def get_stage_from_index(self, layer_idx): ...
    def get_num_virtual_stages(self): ...
    def get_model_chunks(self): ...
    def allreduce_shared_weight_gradients(self) -> None: ...
    def forward_function(self, start, end): ...
    def forward(self, input, chunk_id: Incomplete | None = None): ...
    def save_state_dict(self, path): ...
    def set_state_dir(self, path) -> None: ...
