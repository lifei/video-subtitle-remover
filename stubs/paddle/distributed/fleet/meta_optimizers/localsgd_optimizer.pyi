from .common import CollectiveHelper as CollectiveHelper, OP_ROLE_KEY as OP_ROLE_KEY, OpRole as OpRole
from .meta_optimizer_base import MetaOptimizerBase as MetaOptimizerBase
from _typeshed import Incomplete
from paddle.static import default_main_program as default_main_program, default_startup_program as default_startup_program, program_guard as program_guard

class LocalSGDOptimizer(MetaOptimizerBase):
    inner_opt: Incomplete
    meta_optimizers_white_list: Incomplete
    meta_optimizers_black_list: Incomplete
    snapshot_key: str
    def __init__(self, optimizer) -> None: ...
    def snapshot_name(self, param_name): ...
    def create_snapshot_vars(self, program): ...
    def init_snapshot_vars(self, startup_program, param2snapshot) -> None: ...
    nrings: int
    def minimize_impl(self, loss, startup_program: Incomplete | None = None, parameter_list: Incomplete | None = None, no_grad_set: Incomplete | None = None): ...

class AdaptiveLocalSGDOptimizer(MetaOptimizerBase):
    inner_opt: Incomplete
    meta_optimizers_white_list: Incomplete
    meta_optimizers_black_list: Incomplete
    snapshot_key: str
    def __init__(self, optimizer) -> None: ...
    def snapshot_name(self, param_name): ...
    def create_snapshot_vars(self, program): ...
    def init_snapshot_vars(self, startup_program, param2snapshot) -> None: ...
    nrings: int
    def minimize_impl(self, loss, startup_program: Incomplete | None = None, parameter_list: Incomplete | None = None, no_grad_set: Incomplete | None = None): ...
