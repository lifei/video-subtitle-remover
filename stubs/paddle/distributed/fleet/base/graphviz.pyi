from _typeshed import Incomplete

def crepr(v): ...

class Rank:
    kind: Incomplete
    name: Incomplete
    priority: Incomplete
    nodes: Incomplete
    def __init__(self, kind, name, priority) -> None: ...

class Graph:
    rank_counter: int
    title: Incomplete
    attrs: Incomplete
    nodes: Incomplete
    edges: Incomplete
    rank_groups: Incomplete
    def __init__(self, title, **attrs) -> None: ...
    def code(self): ...
    def rank_group(self, kind, priority): ...
    def node(self, label, prefix, description: str = '', **attrs): ...
    def edge(self, source, target, **attrs): ...
    def compile(self, dot_path): ...
    def show(self, dot_path) -> None: ...

class Node:
    counter: int
    label: Incomplete
    name: Incomplete
    description: Incomplete
    attrs: Incomplete
    def __init__(self, label, prefix, description: str = '', **attrs) -> None: ...

class Edge:
    source: Incomplete
    target: Incomplete
    attrs: Incomplete
    def __init__(self, source, target, **attrs) -> None: ...

class GraphPreviewGenerator:
    graph: Incomplete
    op_rank: Incomplete
    param_rank: Incomplete
    arg_rank: Incomplete
    def __init__(self, title) -> None: ...
    def __call__(self, path: str = 'temp.dot', show: bool = False) -> None: ...
    def add_param(self, name, data_type, highlight: bool = False): ...
    def add_op(self, opType, **kwargs): ...
    def add_arg(self, name, highlight: bool = False): ...
    def add_edge(self, source, target, **kwargs): ...
