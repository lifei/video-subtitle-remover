from ..utils.log_util import logger as logger
from collections.abc import Generator
from paddle import framework as framework
from paddle.autograd import PyLayer as PyLayer
from paddle.base.framework import EagerParamBase as EagerParamBase
from paddle.distributed.fleet.meta_parallel.parallel_layers.random import get_rng_state_tracker as get_rng_state_tracker
from paddle.framework import core as core, in_dynamic_mode as in_dynamic_mode

def detach_variable(inputs): ...
def check_recompute_necessary(inputs) -> None: ...
def swith_rng_state_tracker(rng_state, tracker) -> Generator[None]: ...

class RecomputeFunction(PyLayer):
    @staticmethod
    def forward(ctx, run_function, preserve_rng_state, *args, **kwargs): ...
    @staticmethod
    def backward(ctx, *args): ...

def recompute(function, *args, **kwargs): ...
def recompute_sequential(ctx, functions, *args, **kwargs): ...
