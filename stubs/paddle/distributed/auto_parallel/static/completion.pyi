from ..process_mesh import ProcessMesh as ProcessMesh, compute_compatible_process_mesh as compute_compatible_process_mesh
from .dist_attribute import OperatorDistAttr as OperatorDistAttr, TensorDistAttr as TensorDistAttr
from .operators.common import find_compatible_distributed_operator_impls as find_compatible_distributed_operator_impls, find_distributed_operator_impl_container as find_distributed_operator_impl_container
from .process_group import get_world_process_group as get_world_process_group
from .utils import __no_shape_var_type__ as __no_shape_var_type__, is_gradient_clip_op as is_gradient_clip_op, is_loss_grad_op as is_loss_grad_op, is_loss_op as is_loss_op, is_naive_data_parallel as is_naive_data_parallel
from _typeshed import Incomplete
from paddle.base.core import contains_spmd_rule as contains_spmd_rule, get_phi_spmd_rule as get_phi_spmd_rule, get_spmd_rule as get_spmd_rule
from paddle.base.framework import Operator as Operator
from paddle.base.log_helper import get_logger as get_logger
from paddle.distributed.fleet.meta_optimizers.common import OpRole as OpRole
from paddle.framework import core as core

__skip_dims_mapping_op__: Incomplete

def mark_as_sharding_propagation_skip_op(op) -> None: ...
def is_sharding_propagation_skip_op(op): ...
def compute_compatible_dim_mapping(dim_mapping_list): ...
def compute_compatible_dims_mapping(dims_mapping_list): ...
def merge_process_mesh_two(pm1, pm2): ...

class Completer:
    def __init__(self, dist_context) -> None: ...
    def complete_forward_annotation(self, serial_main_program: Incomplete | None = None): ...
    def complete_backward_annotation(self, serial_main_program: Incomplete | None = None): ...
    def complete_update_annotation(self, serial_main_program) -> None: ...
    def complete_prim_annotation(self, serial_main_program: Incomplete | None = None) -> None: ...
