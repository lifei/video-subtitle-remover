from ..completion import get_phi_spmd_rule as get_phi_spmd_rule
from ..cost import MatmulGradOpCost as MatmulGradOpCost, MatmulOpCost as MatmulOpCost, MatmulV2GradOpCost as MatmulV2GradOpCost, MatmulV2OpCost as MatmulV2OpCost, MulGradOpCost as MulGradOpCost, MulOpCost as MulOpCost, build_comm_costs_from_descs as build_comm_costs_from_descs, build_comm_desc_from_dist_op as build_comm_desc_from_dist_op, build_comp_costs_from_descs as build_comp_costs_from_descs, build_comp_desc_from_dist_op as build_comp_desc_from_dist_op, build_dp_costs as build_dp_costs
from ..process_group import new_process_group as new_process_group
from ..utils import compute_compatible_and_update_dim_mapping as compute_compatible_and_update_dim_mapping, compute_compatible_dims_mapping as compute_compatible_dims_mapping, get_dist_tensor_spec as get_dist_tensor_spec, is_dim_replicate as is_dim_replicate, is_dim_shard as is_dim_shard, is_valid_list_index as is_valid_list_index, set_dist_op_desc_original_id as set_dist_op_desc_original_id
from .common import DistributedOperatorImpl as DistributedOperatorImpl, DistributedOperatorImplContainer as DistributedOperatorImplContainer, ParallelMode as ParallelMode, copy_op_without_infer_shape as copy_op_without_infer_shape, gradient_synchronization as gradient_synchronization, is_parameter_related as is_parameter_related, register_distributed_operator_impl as register_distributed_operator_impl, register_distributed_operator_impl_container as register_distributed_operator_impl_container, set_comm_op_dist_attr_for_program as set_comm_op_dist_attr_for_program, update_op_dims_mapping as update_op_dims_mapping
from .dist_default import DistributedDefaultImpl0 as DistributedDefaultImpl0
from paddle.distributed.auto_parallel.static.cost.comm_op_cost import AllreduceSumOpCost as AllreduceSumOpCost, IdentityOpCost as IdentityOpCost
from paddle.distributed.fleet.meta_optimizers.common import OP_ROLE_KEY as OP_ROLE_KEY, OpRole as OpRole

def trans_x_y_dims_mapping(trans_x, trans_y, x_dims_mapping, y_dims_mapping) -> None: ...
def copy_op_with_new_input_output(ctx, block, src_op, **kwargs): ...
def update_dims_mapping_matmul(dist_op): ...
def mapping_to_dist_operator_impl_matmul(dist_op, original_op_dist_attr): ...

class DistributedMatmul(DistributedOperatorImplContainer):
    def __init__(self, op_type) -> None: ...
    @staticmethod
    def update_dims_mapping(dist_op): ...
    @staticmethod
    def mapping_to_dist_operator_impl(dist_op, original_op_dist_attr): ...

class DistributedMatmulImpl0(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...

class DistributedMatmulImpl1(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...

class DistributedMatmulImpl2(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...

class DistributedMatmulV2(DistributedOperatorImplContainer):
    def __init__(self, op_type) -> None: ...
    @staticmethod
    def update_dims_mapping(dist_op): ...
    @staticmethod
    def mapping_to_dist_operator_impl(dist_op, original_op_dist_attr): ...

class DistributedMatmulV2Impl0(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...

class DistributedMatmulV2Impl1(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...

class DistributedMatmulV2Impl2(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...

class DistributedMul(DistributedOperatorImplContainer):
    def __init__(self, op_type) -> None: ...
    @staticmethod
    def update_dims_mapping(dist_op): ...
    @staticmethod
    def mapping_to_dist_operator_impl(dist_op, original_op_dist_attr): ...

class DistributedMulImpl0(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...

class DistributedMulImpl1(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...

class DistributedMulImpl2(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...
