from ..completion import get_phi_spmd_rule as get_phi_spmd_rule
from ..cost import build_comp_costs_from_descs as build_comp_costs_from_descs, build_comp_desc_from_dist_op as build_comp_desc_from_dist_op, build_dp_costs as build_dp_costs
from ..dist_attribute import OperatorDistAttr as OperatorDistAttr
from ..process_group import new_process_group as new_process_group
from ..utils import compute_compatible_dim_mapping as compute_compatible_dim_mapping, get_dist_tensor_spec as get_dist_tensor_spec, is_prim_op as is_prim_op
from .common import DistributedOperatorImpl as DistributedOperatorImpl, DistributedOperatorImplContainer as DistributedOperatorImplContainer, copy_op_without_infer_shape as copy_op_without_infer_shape, get_default_distributed_operator_impl as get_default_distributed_operator_impl, gradient_synchronization as gradient_synchronization, is_parameter_related as is_parameter_related, register_distributed_operator_impl as register_distributed_operator_impl, register_distributed_operator_impl_container as register_distributed_operator_impl_container, set_comm_op_dist_attr_for_program as set_comm_op_dist_attr_for_program, update_op_dims_mapping as update_op_dims_mapping
from _typeshed import Incomplete
from paddle.distributed.fleet.meta_optimizers.common import OP_ROLE_KEY as OP_ROLE_KEY, OpRole as OpRole

__op_not_need_param_init__: Incomplete
__op_has_shape_attr__: Incomplete

def prim_operator_data_parallel_functor(ctx, src_op) -> None: ...

class DistributedDefault(DistributedOperatorImplContainer):
    def __init__(self, op_type) -> None: ...
    @staticmethod
    def update_dims_mapping(dist_op): ...
    @staticmethod
    def mapping_to_dist_operator_impl(dist_op, original_op_dist_attr): ...

class DistributedDefaultImpl0(DistributedOperatorImpl):
    def __init__(self, name) -> None: ...
    def calc_cost(self, op_role, dist_op, ctx, cluster): ...
    def calc_fwd_cost(self, dist_op, ctx, cluster): ...
    def calc_bwd_cost(self, dist_op, ctx, cluster): ...
    def is_input_compatible(self, dist_op): ...
    def is_output_compatible(self, dist_op): ...
    def is_auto_compatible(self, dist_op): ...
    def update_dims_mapping(self, dist_op): ...
    @staticmethod
    def forward(ctx, *args, **kwargs) -> None: ...
    @staticmethod
    def backward(ctx, *args, **kwargs) -> None: ...
