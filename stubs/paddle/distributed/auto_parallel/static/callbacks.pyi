from ..interface import CollectionNames as CollectionNames, get_collection as get_collection
from _typeshed import Incomplete
from paddle.hapi.callbacks import Callback as Callback, CallbackList as CallbackList, LRScheduler as LRScheduler, ModelCheckpoint as ModelCheckpoint, ProgBarLogger as ProgBarLogger

def config_callbacks(callbacks: Incomplete | None = None, engine: Incomplete | None = None, batch_size: Incomplete | None = None, epochs: Incomplete | None = None, steps: Incomplete | None = None, log_freq: int = 2, verbose: int = 2, save_freq: int = 1, save_dir: Incomplete | None = None, metrics: Incomplete | None = None, acc_step: int = 1, mode: str = 'train'): ...

class ProgBarLoggerAuto(ProgBarLogger):
    def __init__(self, log_freq: int = 1, verbose: int = 2) -> None: ...
    def on_eval_batch_end(self, step, logs: Incomplete | None = None) -> None: ...

class LRSchedulerAuto(LRScheduler):
    def __init__(self, by_step: bool = True, by_epoch: bool = False) -> None: ...
    acc_step: Incomplete
    epoch: Incomplete
    train_step: int
    def on_epoch_begin(self, epoch: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_end(self, step, logs: Incomplete | None = None) -> None: ...

class History(Callback):
    history: Incomplete
    def __init__(self) -> None: ...
    epoch: Incomplete
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_epoch_end(self, epoch, logs: Incomplete | None = None) -> None: ...

class Profiler(Callback):
    prof: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    epoch: Incomplete
    train_step: int
    batch_size: Incomplete
    steps: Incomplete
    def on_epoch_begin(self, epoch: Incomplete | None = None, logs: Incomplete | None = None) -> None: ...
    def on_train_begin(self, logs: Incomplete | None = None) -> None: ...
    def on_train_batch_end(self, step, logs: Incomplete | None = None) -> None: ...
    def on_train_end(self, logs: Incomplete | None = None) -> None: ...

class ModelCheckpointAuto(ModelCheckpoint):
    def __init__(self, *args, **kwargs) -> None: ...
    def on_epoch_end(self, epoch, logs: Incomplete | None = None) -> None: ...
    def on_train_end(self, logs: Incomplete | None = None) -> None: ...
