from .converter import Converter as Converter
from .utils import get_logger as get_logger, to_list as to_list
from _typeshed import Incomplete
from paddle.jit import not_to_static as not_to_static, to_static as to_static
from paddle.jit.dy2static.program_translator import StaticFunction as StaticFunction
from paddle.jit.dy2static.utils import as_not_paddle_func as as_not_paddle_func
from paddle.nn import Layer as Layer
from paddle.static import Parameter as Parameter, global_scope as global_scope, program_guard as program_guard

class ProxyLayer(Layer):
    inner_layer: Incomplete
    loss_func: Incomplete
    metrics: Incomplete
    mode: Incomplete
    def __init__(self, layer, loss_func, metrics) -> None: ...
    def call_loss(self, inputs): ...
    def call_metrics(self, inputs): ...
    training: Incomplete
    def set_mode(self, mode) -> None: ...
    def clone(self): ...
    @property
    def input_vars(self): ...
    @property
    def label_vars(self): ...
    @property
    def output_vars(self): ...
    @property
    def loss_vars(self): ...
    @property
    def metric_vars(self): ...
    @property
    def startup_program(self): ...

class BuildInfo:
    def __init__(self) -> None: ...
    def has_cache(self, mode, update: bool = False): ...
    def cache(self, mode) -> None: ...
    states: Incomplete
    def clear(self) -> None: ...

class ProgramHelper:
    proxy_layer: Incomplete
    inputs_spec: Incomplete
    labels_spec: Incomplete
    build_info: Incomplete
    lazy_init: bool
    def __init__(self, layer, loss_func, metrics, inputs_spec, labels_spec) -> None: ...
    def reset(self) -> None: ...
    def build_program(self, mode) -> None: ...
    def apply_optimizer(self, optimizer): ...
    def to(self, mode) -> None: ...
    def static_func(self): ...
    def init(self, main_program, place, dist_context) -> None: ...
    @property
    def concrete_program(self): ...
    @property
    def main_program(self): ...
    @property
    def startup_program(self): ...
    @property
    def input_vars(self): ...
    @property
    def output_vars(self): ...
    @property
    def label_vars(self): ...
    @property
    def loss_vars(self): ...
    @property
    def metric_vars(self): ...
    def named_parameters(self): ...
