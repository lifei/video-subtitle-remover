from .cost_model import estimate_cost as estimate_cost
from .dist_attribute import OperatorDistAttr as OperatorDistAttr, TensorDistAttr as TensorDistAttr
from .dist_context import DistributedContext as DistributedContext, DistributedOperatorContext as DistributedOperatorContext
from .dist_op import DistributedOperator as DistributedOperator
from .operators.common import get_distributed_operator_impl_container as get_distributed_operator_impl_container, is_elementwise_op as is_elementwise_op
from .process_group import get_process_group as get_process_group
from .utils import get_all_distributed_main_program as get_all_distributed_main_program, update_op_dims_mapping_by_default_dist_impl as update_op_dims_mapping_by_default_dist_impl, update_op_dims_mapping_by_elementwise_like_dist_impl as update_op_dims_mapping_by_elementwise_like_dist_impl
from _typeshed import Incomplete
from paddle.distributed.fleet import auto as auto

class PlanFilter:
    @staticmethod
    def check_dims_mapping_for_tensor(process_mesh_topology, tensor_shape, dims_mapping): ...
    @staticmethod
    def check_dims_mapping_for_op(op, op_dist_attr, vars): ...
    @staticmethod
    def check_dims_mapping_for_special_op(op, op_dist_attr, vars): ...

class PlanSpace:
    not_enum_ops: Incomplete
    special_vars: Incomplete
    @staticmethod
    def enum_process_mesh_topology(processes): ...
    @staticmethod
    def enum_valid_dist_attr_for_program(program, process_mesh_topology, is_pipeline: bool = False): ...

class SearchAlgorithm:
    def __init__(self, name) -> None: ...
    @property
    def name(self) -> None: ...
    def search(self) -> None: ...

class MCMC(SearchAlgorithm):
    def __init__(self, serial_program_info, parallelizer, max_search_times: int = 5) -> None: ...
    @property
    def serial_program_info(self): ...
    @property
    def parallelizer(self): ...
    @property
    def max_search_times(self): ...
    def make_special_op_unshard(self, op, ops, vars, dist_context, valid_dist_attr_dict) -> None: ...
    def init_program(self, valid_dist_attr_dict, program, pipeline_process_meshes, global_process_mesh): ...
    def estimate_searched_strategy_cost(self, dist_context, pipeline_process_meshes: Incomplete | None = None): ...
    def set_tensor_dist_attr(self, op, op_dist_attr, vars, dist_context) -> None: ...
    def change_process_mesh(self, op, changed_process_mesh, vars, dist_context) -> None: ...
    def search_once(self, program, valid_dist_attr_dict, dist_context, pipeline_process_meshes: Incomplete | None = None): ...
    def search(self): ...

class Planner:
    def __init__(self, serial_program_info, parallelizer, algorithm_config: Incomplete | None = None) -> None: ...
    @property
    def serial_program_info(self): ...
    @property
    def algorithm_config(self): ...
    @property
    def algorithm_searcher(self): ...
    @property
    def parallelizer(self): ...
    def create_algorithm_searcher(self, algorithm_config): ...
    def search(self): ...
