from ...utils.log_utils import get_logger as get_logger
from _typeshed import Incomplete
from enum import IntEnum

class DeviceType(IntEnum):
    UNKNOWN = 0
    CPU = 1
    GPU = 2
    XPU = 3
    DCU = 5
    NIC = 6

class LinkType(IntEnum):
    UNKNOWN = 0
    LOC = 1
    SYS = 2
    PHB = 3
    PIX = 4
    PIB = 5
    NVL = 6
    NVB = 7
    NET = 8

class Device:
    NON_ACCELERATOR_TYPE: Incomplete
    def __init__(self, global_id, local_id, machine) -> None: ...
    @property
    def global_id(self): ...
    @global_id.setter
    def global_id(self, value) -> None: ...
    @property
    def local_id(self): ...
    @local_id.setter
    def local_id(self, value) -> None: ...
    @property
    def machine(self): ...
    @machine.setter
    def machine(self, value) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, value) -> None: ...
    @property
    def model(self): ...
    @model.setter
    def model(self, value) -> None: ...
    @property
    def dp_gflops(self): ...
    @dp_gflops.setter
    def dp_gflops(self, value) -> None: ...
    @property
    def sp_gflops(self): ...
    @sp_gflops.setter
    def sp_gflops(self, value) -> None: ...
    @property
    def hp_gflops(self): ...
    @hp_gflops.setter
    def hp_gflops(self, value) -> None: ...
    @property
    def memory(self): ...
    @memory.setter
    def memory(self, value) -> None: ...

class Link:
    default_hop: int
    default_nic_bandwidth: int
    def __init__(self, source, target) -> None: ...
    @property
    def source(self): ...
    @source.setter
    def source(self, value) -> None: ...
    @property
    def target(self): ...
    @target.setter
    def target(self, value) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, value) -> None: ...
    @property
    def bandwidth(self): ...
    @bandwidth.setter
    def bandwidth(self, value) -> None: ...
    @property
    def latency(self): ...
    @latency.setter
    def latency(self, value) -> None: ...
    @property
    def hop(self): ...
    @hop.setter
    def hop(self, value) -> None: ...

class Machine:
    def __init__(self, id) -> None: ...
    @property
    def id(self): ...
    @id.setter
    def id(self, value) -> None: ...
    @property
    def hostname(self): ...
    @hostname.setter
    def hostname(self, value) -> None: ...
    @property
    def addr(self): ...
    @addr.setter
    def addr(self, value) -> None: ...
    @property
    def port(self): ...
    @port.setter
    def port(self, value) -> None: ...
    @property
    def devices(self): ...
    @property
    def links(self): ...
    @property
    def accelerators(self): ...
    def add_device(self, device) -> None: ...
    def add_link(self, link) -> None: ...
    def get_link(self, source_global_id, target_global_id): ...

class AlphaLatency:
    def __init__(self, alpha_latency) -> None: ...
    @property
    def base_ring(self): ...
    @property
    def base_tree(self): ...
    @property
    def switch(self): ...
    @property
    def inter_ring(self): ...
    @property
    def inter_tree(self): ...
    @property
    def intra_ring(self): ...
    @property
    def intra_tree(self): ...

class Cluster:
    def __init__(self) -> None: ...
    def gen_default_config_cluster(self, gpu_model: str = 'V100', cpu_model: str = '6271C', node_count: int = 1, device_count: int = 1, gpu_memory: int = 32, cpu_memory: int = 503, inter_bandwidth: int = 24, intra_bandwidth: int = 235, gpu_dp_gflops: int = 7800, gpu_sp_gflops: int = 15700, gpu_hp_gflops: int = 31400, cpu_dp_gflops: int = 75, cpu_sp_gflops: int = 150): ...
    @property
    def rank_to_device_id(self): ...
    @property
    def device_id_to_rank(self): ...
    @property
    def machines(self): ...
    def add_machine(self, machine) -> None: ...
    @property
    def alpha_latency(self): ...
    def add_device(self, device) -> None: ...
    def add_link(self, link) -> None: ...
    def get_device(self, device_global_id): ...
    def build_from_file(self, json_file_path) -> None: ...
    def get_all_devices(self, device_type): ...
    def get_beta(self, source_device_id, target_device_id): ...
    def get_hop(self, source_device_id, target_device_id): ...
    def cross_machine(self, device_ids): ...
    def convert_rank_to_device_id(self, group_ranks): ...
    def get_involved_machine_count(self, device_ids): ...
    def get_num_machines(self): ...
    def get_num_devices_per_machine(self): ...

logger: Incomplete

def get_default_cluster(json_config: Incomplete | None = None): ...
