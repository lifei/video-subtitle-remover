from .dist_attribute import TensorDistAttr as TensorDistAttr
from .utils import __no_shape_var_type__ as __no_shape_var_type__
from _typeshed import Incomplete
from paddle.framework import Block as Block
from paddle.static import Parameter as Parameter, Variable as Variable

class DistributedTensor:
    @staticmethod
    def get_local_sizes(global_sizes, dims_mapping, topology, processes, rank: Incomplete | None = None, shard_sizes: Incomplete | None = None): ...
    @staticmethod
    def get_local_offsets(global_sizes, dims_mapping, topology, processes, rank, shard_sizes: Incomplete | None = None): ...
    @staticmethod
    def get_global_sizes(local_sizes, dims_mapping, topology, processes, rank: Incomplete | None = None, shard_sizes: Incomplete | None = None): ...
    @staticmethod
    def get_local_shard(global_sizes, dims_mapping, topology, processes, rank, shard_sizes: Incomplete | None = None): ...
    def __init__(self, serial_tensor, dist_attr: Incomplete | None = None, dist_context: Incomplete | None = None) -> None: ...
    @property
    def serial_tensor(self): ...
    @property
    def dist_attr(self): ...
    @dist_attr.setter
    def dist_attr(self, dist_attr) -> None: ...
    @property
    def dist_context(self): ...
    def validate_dist_attr(self): ...
    def local_sizes(self, rank: Incomplete | None = None): ...
    def local_offsets(self, rank: Incomplete | None = None): ...
    def global_sizes(self): ...
    def local_shard(self, rank: Incomplete | None = None): ...
    def new_local_tensor(self, block: Incomplete | None = None, rank: Incomplete | None = None, name: Incomplete | None = None): ...
    def local_tensor(self, rank: Incomplete | None = None): ...
    def __deepcopy__(self, memo): ...
