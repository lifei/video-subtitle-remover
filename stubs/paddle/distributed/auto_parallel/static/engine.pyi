from ...utils.log_utils import get_logger as get_logger
from ..interface import CollectionNames as CollectionNames, fetch as fetch, get_collection as get_collection
from ..strategy import Strategy as Strategy
from .callbacks import config_callbacks as config_callbacks
from .cluster import Cluster as Cluster, get_default_cluster as get_default_cluster
from .converter import Converter as Converter
from .cost.estimate_cost import get_cost_from_engine as get_cost_from_engine
from .dist_context import DistributedContext as DistributedContext, get_default_distributed_context as get_default_distributed_context
from .dist_loader import DistributedDataLoader as DistributedDataLoader, DistributedDataLoaderFromGenerator as DistributedDataLoaderFromGenerator
from .dist_op import DistributedOperator as DistributedOperator
from .dist_saver import DistributedSaver as DistributedSaver
from .helper import ProgramHelper as ProgramHelper
from .parallelizer_v2 import Parallelizer as Parallelizer
from .planner_v2 import Planner as Planner
from .process_group import get_all_process_groups as get_all_process_groups, new_process_group as new_process_group
from _typeshed import Incomplete
from paddle import static as static, utils as utils
from paddle.distributed import fleet as fleet
from paddle.framework import IrGraph as IrGraph, core as core, in_dynamic_mode as in_dynamic_mode
from paddle.metric import Metric as Metric
from paddle.static import InputSpec as InputSpec, Operator as Operator, Variable as Variable, global_scope as global_scope

class Engine:
    history: Incomplete
    enable_job_schedule_profiler: bool
    def __init__(self, model: Incomplete | None = None, loss: Incomplete | None = None, optimizer: Incomplete | None = None, metrics: Incomplete | None = None, cluster: Incomplete | None = None, strategy: Incomplete | None = None) -> None: ...
    def fit(self, train_data, train_sample_split: Incomplete | None = None, batch_size: int = 1, epochs: int = 1, steps_per_epoch: Incomplete | None = None, log_freq: int = 10, save_dir: Incomplete | None = None, save_freq: int = 1, valid_data: Incomplete | None = None, valid_sample_split: Incomplete | None = None, valid_freq: int = 1, valid_steps: Incomplete | None = None, collate_fn: Incomplete | None = None, callbacks: Incomplete | None = None, verbose: int = 2, nvprof_range=[-1, -1]): ...
    def evaluate(self, valid_data, valid_sample_split: Incomplete | None = None, batch_size: int = 1, steps: Incomplete | None = None, log_freq: int = 10, collate_fn: Incomplete | None = None, callbacks: Incomplete | None = None, verbose: int = 2): ...
    def predict(self, test_data, test_sample_split: Incomplete | None = None, batch_size: int = 1, steps: Incomplete | None = None, collate_fn: Incomplete | None = None, callbacks: Incomplete | None = None, verbose: int = 2): ...
    def dataloader(self, dataset, batch_size: int = 1, shuffle: bool = False, drop_last: bool = True, collate_fn: Incomplete | None = None, num_workers: int = 0, use_buffer_reader: bool = True, use_shared_memory: bool = True, timeout: int = 0, worker_init_fn: Incomplete | None = None, epochs: int = 1, steps_per_epoch: Incomplete | None = None, sample_split: int = 1, mode: Incomplete | None = None, places: Incomplete | None = None): ...
    def dataloader_from_generator(self, dataset, capacity: int = 70, use_double_buffer: bool = True, iterable: bool = True, use_multiprocess: bool = False, drop_last: bool = True, batch_size: int = 1, epochs: int = 1, steps_per_epoch: Incomplete | None = None, collate_fn: Incomplete | None = None, sample_split: int = 1, mode: Incomplete | None = None): ...
    def prepare(self, inputs_spec: Incomplete | None = None, labels_spec: Incomplete | None = None, inputs: Incomplete | None = None, labels: Incomplete | None = None, main_program: Incomplete | None = None, startup_program: Incomplete | None = None, mode: Incomplete | None = None, init_parameters: bool = True) -> None: ...
    def run(self, data: Incomplete | None = None, feed: Incomplete | None = None, fetch_list: Incomplete | None = None, mode: Incomplete | None = None): ...
    def get_feed_list(self): ...
    def to_mode(self, mode) -> None: ...
    def save(self, path, training: bool = True) -> None: ...
    def load(self, path, strict: bool = True, load_optimizer: bool = True): ...
    def cost(self, inputs_spec: Incomplete | None = None, labels_spec: Incomplete | None = None, mode: Incomplete | None = None): ...
    def get_dist_main_program(self, mode): ...
    def get_dist_startup_program(self, mode): ...
    def get_serial_main_program(self, mode): ...
    def get_serial_startup_program(self, mode): ...
    @property
    def main_program(self): ...
    @property
    def startup_program(self): ...
    @property
    def dist_context(self): ...
    @property
    def serial_main_program(self): ...
    @property
    def serial_startup_program(self): ...
    @property
    def feed_vars(self): ...
    @property
    def fetch_vars(self): ...
    @property
    def optimizer(self): ...
    @property
    def inputs(self): ...
    @property
    def labels(self): ...
