from ..cluster import DeviceType as DeviceType, LinkType as LinkType, get_default_cluster as get_default_cluster
from ..dist_tensor import DistributedTensor as DistributedTensor
from ..process_group import get_process_group as get_process_group
from _typeshed import Incomplete
from paddle.base.core import VarDesc as VarDesc
from paddle.utils.flops import flops as flops

COMM_OP_TYPE: Incomplete
NON_COMP_TYPE: Incomplete

def build_comp_desc_from_op(op): ...
def build_comp_desc_from_dist_op(dist_op, dist_context): ...
def build_comp_desc_str_for_predict(desc): ...
def build_comm_desc_from_dist_op(op_type, dist_op, ctx, var_names, attrs: Incomplete | None = None, parallel_axis: Incomplete | None = None, group_ranks: Incomplete | None = None): ...
def build_comm_desc(op_type, group_ranks, dtype, shape, attrs: Incomplete | None = None): ...
def build_comm_costs_from_descs(op_cost_class, ctx, processes, descs, cluster, is_dp: bool = False): ...
def build_comp_costs_from_descs(op_cost_class, ctx, processes, descs, cluster): ...
def build_dp_costs(result, dist_op, ctx, var_names, attrs, parallel_axis, cluster) -> None: ...

class CommContext:
    def __new__(cls, *args, **kwargs): ...
    beta: Incomplete
    hops: Incomplete
    cluster: Incomplete
    base_ring: Incomplete
    base_tree: Incomplete
    intra_ring: Incomplete
    intra_tree: Incomplete
    inter_ring: Incomplete
    inter_tree: Incomplete
    switch: Incomplete
    def __init__(self, cluster) -> None: ...
    def get_max_beta(self, ranks): ...
    def get_hops(self, ranks): ...

class Cost:
    def __init__(self, time: int = 0, memory: int = 0, flops: int = 0) -> None: ...
    @property
    def time(self): ...
    @time.setter
    def time(self, val) -> None: ...
    @property
    def memory(self): ...
    @memory.setter
    def memory(self, val) -> None: ...
    @property
    def flops(self): ...
    @flops.setter
    def flops(self, val) -> None: ...
    def __add__(self, rhs): ...
    def __sub__(self, rhs): ...

class OpCost:
    OP_TYPE: str
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None) -> None: ...
    @property
    def op(self): ...
    @property
    def op_desc(self): ...
    @property
    def time(self): ...
    @property
    def memory(self): ...
    @property
    def flops(self): ...
    @property
    def cost(self): ...
    def calc_time(self): ...
    def calc_memory(self): ...
    def calc_flops(self): ...
    def calc_cost(self): ...
    def __add__(self, rhs): ...
    def __sub__(self, rhs): ...

class CommOpCost(OpCost):
    OP_TYPE: str
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None, comm_context: Incomplete | None = None) -> None: ...
    @property
    def comm_context(self): ...
    @property
    def comm_count(self): ...
    @property
    def rank_count(self): ...
    @property
    def machine_count(self): ...
    @property
    def hops(self): ...
    @property
    def group_ranks(self): ...

class CompOpCost(OpCost):
    OP_TYPE: str
    cluster: Incomplete
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None, cluster: Incomplete | None = None) -> None: ...
    def calc_flops(self): ...
    def calc_time(self): ...

def register_op_cost(cls): ...
def calc_time_by_modeling(op: Incomplete | None = None, desc: Incomplete | None = None, cluster: Incomplete | None = None): ...
def calc_time_by_cost_model(op, cluster: Incomplete | None = None): ...
