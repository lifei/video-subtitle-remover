from .base_cost import CommOpCost as CommOpCost, register_op_cost as register_op_cost
from _typeshed import Incomplete

class AllreduceSumOpCost(CommOpCost):
    OP_TYPE: str
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None, comm_context: Incomplete | None = None) -> None: ...
    def calc_time(self): ...
    def calc_time_ring(self): ...
    def calc_time_tree(self): ...

class AllgatherOpCost(CommOpCost):
    OP_TYPE: str
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None, comm_context: Incomplete | None = None) -> None: ...
    def calc_time(self): ...
    def calc_time_ring(self): ...

class BroadcastOpCost(CommOpCost):
    OP_TYPE: str
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None, comm_context: Incomplete | None = None) -> None: ...
    def calc_time(self): ...
    def calc_time_ring(self): ...

class IdentityOpCost(CommOpCost):
    OP_TYPE: str
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None, comm_context: Incomplete | None = None) -> None: ...
    def calc_time(self): ...

class RecvOpCost(CommOpCost):
    OP_TYPE: str
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None, comm_context: Incomplete | None = None) -> None: ...
    def calc_time(self): ...

class SendOpCost(CommOpCost):
    OP_TYPE: str
    def __init__(self, op: Incomplete | None = None, op_desc: Incomplete | None = None, comm_context: Incomplete | None = None) -> None: ...
    def calc_time(self): ...
