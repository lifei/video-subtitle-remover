from ..dist_tensor import DistributedTensor as DistributedTensor
from ..operators.common import get_distributed_operator_impl_container as get_distributed_operator_impl_container
from .base_cost import Cost as Cost
from _typeshed import Incomplete
from paddle.distributed.fleet.meta_optimizers.common import OpRole as OpRole

class CostEstimator:
    max_memories: Incomplete
    max_memory: Incomplete
    def __init__(self, program, cluster, mode: str = 'modeling', rank: Incomplete | None = None, loop_count: int = 10) -> None: ...
    @property
    def loop_count(self): ...
    @property
    def detailed_cost(self): ...
    @property
    def program(self): ...
    @property
    def rank(self): ...
    @property
    def dist_context(self): ...
    @property
    def cluster(self): ...
    @property
    def mode(self): ...
    @property
    def global_cost(self): ...
    def local_cost(self, rank: Incomplete | None = None): ...
    def local_bubble_time(self, rank: Incomplete | None = None): ...
    def prepare(self) -> None: ...
    def estimate(self, dist_context, resharder: Incomplete | None = None): ...
    def pretty_print_cost(self) -> None: ...

def get_cost_from_engine(engine, mode): ...
