from _typeshed import Incomplete

class TunableVariable:
    name: Incomplete
    def __init__(self, name, default: Incomplete | None = None) -> None: ...
    @property
    def default(self): ...
    def get_state(self): ...
    @classmethod
    def from_state(cls, state): ...

class Fixed(TunableVariable):
    name: Incomplete
    def __init__(self, name, default) -> None: ...
    def random(self, seed: Incomplete | None = None): ...

class Boolean(TunableVariable):
    def __init__(self, name, default: bool = False) -> None: ...
    def random(self, seed: Incomplete | None = None): ...

class Choice(TunableVariable):
    values: Incomplete
    def __init__(self, name, values, default: Incomplete | None = None) -> None: ...
    @property
    def default(self): ...
    def random(self, seed: Incomplete | None = None): ...
    def get_state(self): ...

class IntRange(TunableVariable):
    start: Incomplete
    stop: Incomplete
    step: Incomplete
    endpoint: Incomplete
    def __init__(self, name, start, stop, step: int = 1, default: Incomplete | None = None, endpoint: bool = False) -> None: ...
    @property
    def default(self): ...
    def random(self, seed: Incomplete | None = None): ...
    def get_state(self): ...

class FloatRange(TunableVariable):
    stop: Incomplete
    start: Incomplete
    step: Incomplete
    endpoint: Incomplete
    def __init__(self, name, start, stop, step: Incomplete | None = None, default: Incomplete | None = None, endpoint: bool = False) -> None: ...
    @property
    def default(self): ...
    def random(self, seed: Incomplete | None = None): ...
    def get_state(self): ...
