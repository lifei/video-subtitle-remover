from .recorder import MetricsRecorder as MetricsRecorder
from .storable import Storable as Storable
from .tunable_space import TunableSpace as TunableSpace
from _typeshed import Incomplete

class TrialStatus:
    RUNNING: str
    COMPLETED: str
    STOPPED: str
    INVALID: str

class Trial(Storable):
    def __init__(self, tunable_space, trial_id: Incomplete | None = None, status=...) -> None: ...
    @property
    def id(self): ...
    @property
    def space(self): ...
    @property
    def recorder(self): ...
    @property
    def score(self): ...
    @score.setter
    def score(self, score) -> None: ...
    @property
    def best_step(self): ...
    @best_step.setter
    def best_step(self, best_step) -> None: ...
    @property
    def status(self): ...
    @status.setter
    def status(self, status) -> None: ...
    def summary(self) -> None: ...
    def get_state(self): ...
    def set_state(self, state) -> None: ...
    @classmethod
    def from_state(cls, state): ...

class OptimizationTunerTrial(Trial):
    def __init__(self, config, name, changed_configs, trial_id: Incomplete | None = None, status=...) -> None: ...
    @property
    def name(self): ...
    def summary(self): ...
