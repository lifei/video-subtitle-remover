import abc
from ..utils import get_logger as get_logger, is_recompute_op as is_recompute_op
from .trial import TrialStatus as TrialStatus
from _typeshed import Incomplete
from abc import ABC, abstractmethod

class AlgorithmBase(ABC, metaclass=abc.ABCMeta):
    name: Incomplete
    def __init__(self, config) -> None: ...
    @property
    def changed_configs(self): ...
    def collect_model_info(self, main_prog, startup_prog) -> None: ...
    @abstractmethod
    def next_trial(self): ...
    @abstractmethod
    def update(self, results): ...
    def get_config_from_trial(self, trial): ...

def register_algor(name): ...
def new_algorithm(name, config): ...

class ShardingStageAlgorithm(AlgorithmBase):
    def __init__(self, config) -> None: ...
    def next_trial(self): ...
    def update(self, results) -> None: ...

class ReccomputeCheckpointAlgorithm(AlgorithmBase):
    def __init__(self, config) -> None: ...
    def collect_model_info(self, main_prog, startup_prog) -> None: ...
    def next_trial(self): ...
    def update(self, results) -> None: ...
