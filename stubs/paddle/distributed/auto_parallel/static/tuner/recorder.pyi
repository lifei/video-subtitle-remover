from _typeshed import Incomplete

class MetricRecord:
    def __init__(self, value, step) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    @property
    def step(self): ...
    @step.setter
    def step(self, step) -> None: ...
    def mean(self): ...
    def get_state(self): ...
    @classmethod
    def from_state(cls, state): ...
    def __eq__(self, other): ...

class MetricRecords:
    def __init__(self, direction: str = 'min') -> None: ...
    @property
    def records(self): ...
    @records.setter
    def records(self, records) -> None: ...
    @property
    def direction(self): ...
    @direction.setter
    def direction(self, direction) -> None: ...
    def update(self, value, step: int = 0) -> None: ...
    def get_best_value(self): ...
    def get_best_step(self): ...
    def get_statistics(self): ...
    def get_state(self): ...
    @classmethod
    def from_state(cls, state): ...

class MetricsRecorder:
    def __init__(self, metrics: Incomplete | None = None) -> None: ...
    @property
    def records(self): ...
    def exists(self, name): ...
    def register_metrics(self, metrics: Incomplete | None = None) -> None: ...
    def register(self, name, direction: Incomplete | None = None) -> None: ...
    def update(self, name, value, step: int = 0): ...
    def get_records(self, name): ...
    def set_records(self, name, records) -> None: ...
    def get_best_value(self, name): ...
    def get_best_step(self, name): ...
    def get_statistics(self, name): ...
    def get_state(self): ...
    @classmethod
    def from_state(cls, state): ...
