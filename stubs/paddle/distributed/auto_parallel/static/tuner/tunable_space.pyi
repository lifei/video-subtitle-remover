from .tunable_variable import Boolean as Boolean, Choice as Choice, Fixed as Fixed, FloatRange as FloatRange, IntRange as IntRange
from _typeshed import Incomplete

class TunableSpace:
    def __init__(self) -> None: ...
    @property
    def variables(self): ...
    @variables.setter
    def variables(self, variables) -> None: ...
    @property
    def values(self): ...
    @values.setter
    def values(self, values) -> None: ...
    def get_value(self, name): ...
    def set_value(self, name, value) -> None: ...
    def __getitem__(self, name): ...
    def __setitem__(self, name, value) -> None: ...
    def __contains__(self, name) -> bool: ...
    def fixed(self, name, default): ...
    def boolean(self, name, default: bool = False): ...
    def choice(self, name, values, default: Incomplete | None = None): ...
    def int_range(self, name, start, stop, step: int = 1, default: Incomplete | None = None): ...
    def float_range(self, name, start, stop, step: Incomplete | None = None, default: Incomplete | None = None): ...
    def get_state(self): ...
    @classmethod
    def from_state(cls, state): ...
