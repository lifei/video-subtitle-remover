from _typeshed import Incomplete
from paddle.framework import core as core

def get_current_process_mesh(): ...
def set_current_process_mesh(process_mesh) -> None: ...
def reset_current_process_mesh() -> None: ...
def get_unique_id_for_process_mesh(shape, process_ids): ...
def retrive_unique_id_for_process_mesh(shape, process_ids): ...
def get_unique_process_mesh_map(): ...

class ProcessMesh(core.ProcessMesh):
    def __init__(self, mesh: Incomplete | None = None, dim_names: Incomplete | None = None, shape: Incomplete | None = None, process_ids: Incomplete | None = None) -> None: ...
    @property
    def mesh(self): ...
    @property
    def dim_names(self): ...
    @property
    def unique_id(self): ...
    def __getitem__(self, index): ...
    def get_dim_size(self, dim_name): ...
    def get_mesh_with_dim(self, dim_name): ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: types.TracebackType | None) -> None: ...
    def __deepcopy__(self, memo): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def compute_compatible_process_mesh(process_mesh_list): ...
def merge_process_meshes(process_meshes): ...
