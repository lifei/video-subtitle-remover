from .process_mesh import ProcessMesh as ProcessMesh, get_current_process_mesh as get_current_process_mesh
from .static.dist_context import get_default_distributed_context as get_default_distributed_context
from .static.dist_op import DistributedOperatorHelper as DistributedOperatorHelper
from .static.dist_tensor import DistributedTensor as DistributedTensor
from .static.utils import __no_shape_var_type__ as __no_shape_var_type__, convert_to_dims_mapping as convert_to_dims_mapping, verify_shard_spec as verify_shard_spec
from _typeshed import Incomplete
from paddle.framework import core as core

def shard_tensor(x, process_mesh: Incomplete | None = None, shard_spec: Incomplete | None = None): ...
def shard_op(op, process_mesh: Incomplete | None = None, in_shard_specs: Incomplete | None = None, out_shard_specs: Incomplete | None = None, **kwargs): ...
def recompute(op): ...
def exclude_ops_in_recompute(run_function): ...

class CollectionNames:
    FETCHES: str
    LOGGING: str

def get_collection(name): ...
def add_to_collection(collection_name, value, name: Incomplete | None = None) -> None: ...
def fetch(tensor, name: Incomplete | None = None, logging: bool = False) -> None: ...
def get_mesh(): ...
def create_mesh(mesh_dims: list[tuple[str, int]]): ...
