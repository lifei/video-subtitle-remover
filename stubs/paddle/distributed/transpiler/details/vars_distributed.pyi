from _typeshed import Incomplete
from paddle.static import Variable as Variable

class VarStruct:
    name: Incomplete
    shape: Incomplete
    dtype: Incomplete
    type: Incomplete
    lod_level: Incomplete
    persistable: Incomplete
    def __init__(self, name, shape, dtype, type, lod_level, persistable) -> None: ...

class VarDistributed:
    origin: Incomplete
    slice: Incomplete
    is_slice: bool
    block_id: int
    offset: int
    vtype: Incomplete
    endpoint: Incomplete
    def __init__(self, origin_var, slice_var, is_slice: Incomplete | None = None, block_id: Incomplete | None = None, offset: Incomplete | None = None, vtype: Incomplete | None = None, endpoint: Incomplete | None = None) -> None: ...
    @staticmethod
    def equal(var1, var2): ...

class VarsDistributed:
    distributed_vars: Incomplete
    def __init__(self) -> None: ...
    def add_distributed_var(self, origin_var, slice_var, is_slice: Incomplete | None = None, block_id: Incomplete | None = None, offset: Incomplete | None = None, vtype: Incomplete | None = None, endpoint: Incomplete | None = None) -> None: ...
    def get_distributed_var_by_slice(self, var_name): ...
    @staticmethod
    def equal(var1, var2): ...
    def get_distributed_var_by_origin_and_ep(self, origin_var_name, endpoint): ...
    def get_distributed_vars_by_vtypes(self, vtypes, groupby: bool = False): ...
    def get_distributed_vars_by_ep(self, endpoint, vtype: Incomplete | None = None): ...
    def overview(self): ...
