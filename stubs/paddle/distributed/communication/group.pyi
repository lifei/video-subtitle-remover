from _typeshed import Incomplete
from paddle import framework as framework

class Group:
    def __init__(self, rank_in_group, id, ranks, pg: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    @property
    def rank(self): ...
    @property
    def ranks(self): ...
    @property
    def nranks(self): ...
    @property
    def name(self): ...
    @property
    def process_group(self): ...
    @property
    def world_size(self): ...
    @property
    def backend(self): ...
    @property
    def id(self): ...
    def is_member(self): ...
    def get_group_rank(self, rank): ...

class _GroupManager:
    global_group_id: int
    group_map_by_id: Incomplete

def is_initialized(): ...
def destroy_process_group(group: Incomplete | None = None) -> None: ...
def get_group(id: int = 0): ...
def wait(tensor, group: Incomplete | None = None, use_calc_stream: bool = True) -> None: ...
def barrier(group: Incomplete | None = None): ...
def get_backend(group: Incomplete | None = None): ...
