from _typeshed import Incomplete

__SUPPORTED_RECOMPUTE_GRANULARITY__: Incomplete

def divisor(num, reverse: bool = False): ...
def dist_degree_with_customized_range(mode, num_gpus, num_nodes, customized_range, tuner_cfg: Incomplete | None = None): ...
def dist_degree(mode, num_gpus, num_nodes, tuner_cfg: Incomplete | None = None): ...
def default_candidates(tuner_cfg): ...
def search_all(tuner_cfg): ...
def search_by_dp_estimation(tuner_cfg): ...
def add_overlap_performance(cur_cfg, tuner_cfg, history_cfgs) -> None: ...
def gen_sharding_overlap_args(res_args, cfg, tuner_cfg) -> None: ...
def gen_new_args(raw_args, cfg, tuner_cfg, run_best: bool = False): ...
def gen_new_ctx(ctx, cur_cfg, tuner_cfg): ...
def read_metric_log(path, file: str = 'workerlog.0', target_metric: str = 'step/s') -> tuple[float, int]: ...
def read_step_time_log(path, file: str = 'workerlog.0', target_metric: str = 'interval_runtime') -> tuple[float, int]: ...
def read_memory_log(path, file) -> tuple[float, bool]: ...
def read_log(path, metric_file: str = 'workerlog.0', target_metric: str = 'step/s', memory_file: str = '0.gpu.log') -> tuple[float, float, int]: ...
def three_mul_combinations(target): ...
def gbs_dp_mp_pp_candidates(tuner_cfg, num_gpus, num_nodes): ...
def gbs_default_candidates(tuner_cfg): ...
def gbs_search_all(tuner_cfg): ...
def load_configs_from_csv(configs_csv): ...
