from _typeshed import Incomplete
from paddle.distributed.launch.utils.kv_client import KVClient as KVClient
from paddle.distributed.launch.utils.kv_server import KVServer as KVServer

ETCD_PROTOCAL: str

class Master:
    MAIN: str
    STANDBY: str
    PATICIPANT: str
    ctx: Incomplete
    server: Incomplete
    initialized: bool
    endpoint: Incomplete
    def __init__(self, ctx) -> None: ...
    def stop(self) -> None: ...
    def set_status(self, status) -> None: ...
    def get_status(self) -> None: ...
    def restart_peer(self) -> None: ...
    def sync_peers(self, prefix, key, value, size, rank: int = -1) -> tuple[list, int]: ...
    @classmethod
    def factory(cls, ctx): ...

class HTTPMaster(Master):
    role: Incomplete
    endpoint: Incomplete
    server: Incomplete
    client: Incomplete
    initialized: bool
    def lazy_init(self) -> None: ...
    def stop(self) -> None: ...
    def sync_peers(self, prefix, key, value, size, rank: int = -1) -> tuple[list, int]: ...

class ETCDMaster(Master):
    endpoint: Incomplete
    client: Incomplete
    def __init__(self, ctx) -> None: ...
    def sync_peers(self, prefix, key, value, size, rank: int = -1) -> tuple[list, int]: ...
    job_prefix: Incomplete
    heartbeat_prefix: Incomplete
    beat_thread: Incomplete
    def register_heartbeat(self, job_id, pod_id, ttl: int = 10) -> None: ...
    def fetch_peer_alive(self): ...
    def wait_peer_ready(self, replicas_min, replicas_max, timeout): ...
    def restart_peer(self) -> None: ...
    def set_status(self, status) -> None: ...
    def get_status(self): ...
    def stop(self) -> None: ...
