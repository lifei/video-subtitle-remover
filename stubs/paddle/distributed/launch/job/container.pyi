from .status import Status as Status
from _typeshed import Incomplete
from paddle.distributed.launch.utils.process_context import ProcessContext as ProcessContext

class Container:
    log_mode: Incomplete
    def __init__(self, entrypoint=[], rank: int = -1, env={}, overwrite_log: bool = False) -> None: ...
    @property
    def env(self): ...
    @property
    def entrypoint(self): ...
    @entrypoint.setter
    def entrypoint(self, entry) -> None: ...
    @property
    def rank(self): ...
    @rank.setter
    def rank(self, r) -> None: ...
    @property
    def outfile(self): ...
    @outfile.setter
    def outfile(self, out) -> None: ...
    @property
    def errfile(self): ...
    @errfile.setter
    def errfile(self, err) -> None: ...
    @property
    def shell(self): ...
    @shell.setter
    def shell(self, shell) -> None: ...
    def update_env(self, env={}, **kwargs) -> None: ...
    def start(self): ...
    def terminate(self, force: bool = False): ...
    def wait(self, timeout: Incomplete | None = None): ...
    @property
    def exit_code(self): ...
    @property
    def status(self): ...
    def logs(self, fn: Incomplete | None = None, offset: int = 0, whence: int = 1, limit: int = 1000): ...
    def tail(self, length: int = 3000) -> None: ...
