from . import core as core
from ..pir import Value as Value
from ..pir.core import ParameterMeta as ParameterMeta
from .framework import Variable as Variable, default_main_program as default_main_program, in_dygraph_mode as in_dygraph_mode, in_pir_mode as in_pir_mode
from _typeshed import Incomplete
from collections.abc import Generator

def convert_float_to_uint16(data, data_format: str = 'NCHW'): ...
def convert_uint16_to_float(data): ...
def convert_dtype(dtype): ...
def check_variable_and_dtype(input, input_name, expected_dtype, op_name, extra_message: str = '') -> None: ...
def check_type(input, input_name, expected_type, op_name, extra_message: str = '') -> None: ...
def check_dtype(input_dtype, input_name, expected_dtype, op_name, extra_message: str = '') -> None: ...
def check_shape(shape, op_name, expected_shape_type=..., expected_element_type=..., expected_tensor_dtype=('int32', 'int64')) -> None: ...

class DataToLoDTensorConverter:
    place: Incomplete
    lod_level: Incomplete
    shape: Incomplete
    dtype: Incomplete
    def __init__(self, place, lod_level, shape, dtype) -> None: ...
    def feed(self, data) -> None: ...
    def done(self): ...

class BatchedTensorProvider:
    place: Incomplete
    batch_size: Incomplete
    generator: Incomplete
    converters: Incomplete
    drop_last: Incomplete
    def __init__(self, feed_list, place, batch_size, generator, drop_last) -> None: ...
    def __call__(self) -> Generator[Incomplete]: ...

class DataFeeder:
    feed_dtypes: Incomplete
    feed_names: Incomplete
    feed_shapes: Incomplete
    feed_lod_level: Incomplete
    place: Incomplete
    def __init__(self, feed_list, place, program: Incomplete | None = None) -> None: ...
    def feed(self, iterable): ...
