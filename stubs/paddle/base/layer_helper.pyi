from . import unique_name as unique_name
from .framework import Parameter as Parameter, dtype_is_floating as dtype_is_floating, in_dygraph_mode as in_dygraph_mode
from .layer_helper_base import LayerHelperBase as LayerHelperBase
from .param_attr import ParamAttr as ParamAttr
from _typeshed import Incomplete
from collections.abc import Generator

class LayerHelper(LayerHelperBase):
    kwargs: Incomplete
    def __init__(self, layer_type, **kwargs) -> None: ...
    def append_op(self, *args, **kwargs): ...
    def multiple_input(self, input_param_name: str = 'input'): ...
    def input(self, input_param_name: str = 'input'): ...
    @property
    def param_attr(self): ...
    @property
    def bias_attr(self): ...
    def multiple_param_attr(self, length): ...
    def iter_inputs_and_params(self, input_param_name: str = 'input') -> Generator[Incomplete, Incomplete]: ...
    def input_dtype(self, input_param_name: str = 'input'): ...
    def get_parameter(self, name): ...
    def append_bias_op(self, input_var, dim_start: int = 1, dim_end: Incomplete | None = None): ...
    def append_activation(self, input_var): ...
    def is_instance(self, param_name, cls) -> None: ...
