from . import core as core, framework as framework
from .framework import cpu_places as cpu_places, cuda_places as cuda_places, xpu_places as xpu_places
from _typeshed import Incomplete

ExecutionStrategy: Incomplete
BuildStrategy: Incomplete
InferNativeConfig: Incomplete
InferAnalysisConfig: Incomplete
DeviceType: Incomplete

class CompiledProgram:
    def __init__(self, program_or_graph, build_strategy: Incomplete | None = None) -> None: ...

class IpuDynamicPatcher:
    patcher_cache: Incomplete
    def __init__(self) -> None: ...
    @staticmethod
    def convert_concrete_program(ipu_strategy, concrete_program, class_instance: Incomplete | None = None): ...
    @staticmethod
    def patch_program_cache(ipu_strategy): ...
    @staticmethod
    def patch_lr_scheduler(ipu_strategy) -> None: ...
    @staticmethod
    def register_patch(ipu_strategy) -> None: ...
    @staticmethod
    def release_patch() -> None: ...

class IpuStrategy:
    has_custom_ops: bool
    custom_op_names: Incomplete
    need_compile: bool
    def __init__(self) -> None: ...
    def register_patch(self) -> None: ...
    def release_patch(self) -> None: ...
    def set_optimizer(self, optimizer) -> None: ...
    def parse_optimizer(self, optimizer): ...
    def set_graph_config(self, num_ipus: int = 1, is_training: bool = True, micro_batch_size: int = 1, enable_manual_shard: bool = False) -> None: ...
    def set_pipelining_config(self, enable_pipelining: bool = False, batches_per_step: int = 1, enable_gradient_accumulation: bool = False, accumulation_factor: int = 1) -> None: ...
    def set_precision_config(self, enable_fp16: bool = False) -> None: ...
    def add_custom_op(self, paddle_op, popart_op: Incomplete | None = None, domain: str = 'custom.ops', version: int = 1) -> None: ...
    def set_options(self, options) -> None: ...
    def get_option(self, option): ...
    def enable_pattern(self, pattern) -> None: ...
    def disable_pattern(self, pattern) -> None: ...
    @property
    def num_ipus(self): ...
    @property
    def is_training(self): ...
    @property
    def enable_pipelining(self): ...
    @property
    def enable_fp16(self): ...

class IpuCompiledProgram:
    def __init__(self, program: Incomplete | None = None, scope: Incomplete | None = None, ipu_strategy: Incomplete | None = None) -> None: ...
    def compile(self, feed_list, fetch_list): ...
