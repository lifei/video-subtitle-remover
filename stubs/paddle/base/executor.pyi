from . import compiler as compiler, core as core, framework as framework, unique_name as unique_name
from ..pir import OpResult as OpResult, Value as Value, translate_to_pir as translate_to_pir
from .data_feeder import convert_dtype as convert_dtype
from .framework import Operator as Operator, Program as Program, Variable as Variable, convert_np_dtype_to_dtype_ as convert_np_dtype_to_dtype_, default_main_program as default_main_program, get_flags as get_flags, in_pir_mode as in_pir_mode, paddle_type_to_proto_type as paddle_type_to_proto_type, set_flags as set_flags
from .trainer_factory import FetchHandlerMonitor as FetchHandlerMonitor, TrainerFactory as TrainerFactory
from .wrapped_decorator import signature_safe_contextmanager as signature_safe_contextmanager
from _typeshed import Incomplete
from collections.abc import Generator
from paddle import pir as pir

g_scope: Incomplete
InferNativeConfig: Incomplete
InferAnalysisConfig: Incomplete

def global_scope(): ...
def scope_guard(scope) -> Generator[None]: ...
def as_numpy(tensor, copy: bool = False): ...
def dtype_is_compatible_with(first, second): ...
def dimension_is_compatible_with(first, second): ...
def check_feed_shape_type(var, feed, num_places: int = 1): ...
def pir_check_feed_shape_type(feed, name, target_shape, dtype, num_places: int = 1): ...
def has_feed_operators(block, feed_targets, feed_holder_name): ...
def has_fetch_operators(block, fetch_targets, fetch_holder_name, fetch_op: str = 'fetch'): ...
def has_fetch_operations(block, fetch_targets, fetch_holder_name, fetch_op: str = 'pd_op.fetch'): ...

class FetchHandler:
    var_dict: Incomplete
    period_secs: Incomplete
    def __init__(self, var_dict: Incomplete | None = None, period_secs: int = 60) -> None: ...
    def handler(self, res_dict) -> None: ...
    @staticmethod
    def help() -> None: ...

class _StandaloneExecutor:
    def __init__(self, place, plan, scope) -> None: ...
    def run(self, feed_names, return_numpy: bool = True, enable_job_schedule_profiler: bool = False): ...
    def run_profile(self, feed_names) -> core.ProgramDesc: ...

class _ExecutorCache:
    class _CachedData:
        program: Incomplete
        feed: Incomplete
        fetch_list: Incomplete
        feed_var_name: Incomplete
        fetch_var_name: Incomplete
        place: Incomplete
        scope: Incomplete
        key: Incomplete
        def __init__(self, program, feed, fetch_list, feed_var_name, fetch_var_name, place, scope) -> None: ...
        def __eq__(self, other): ...
        def __hash__(self): ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def get_program_and_executor(self, program, feed, fetch_list, feed_var_name, fetch_var_name, place, scope): ...
    def get_pir_program_and_executor(self, program, feed, fetch_list, feed_var_name, fetch_var_name, place, scope): ...

class Executor:
    place: Incomplete
    program_caches: Incomplete
    ctx_caches: Incomplete
    trainer_caches: Incomplete
    scope_caches: Incomplete
    micro_scope_cache: Incomplete
    var_caches: Incomplete
    pruned_program_caches: Incomplete
    pruned_program_scope_caches: Incomplete
    op_role_key: Incomplete
    enable_job_schedule_profiler: bool
    def __init__(self, place: Incomplete | None = None) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def run(self, program: Incomplete | None = None, feed: Incomplete | None = None, fetch_list: Incomplete | None = None, feed_var_name: str = 'feed', fetch_var_name: str = 'fetch', scope: Incomplete | None = None, return_numpy: bool = True, use_program_cache: bool = False, use_prune: bool = False): ...
    def split_program_by_device(self, program): ...
    def infer_from_dataset(self, program: Incomplete | None = None, dataset: Incomplete | None = None, scope: Incomplete | None = None, thread: int = 0, debug: bool = False, fetch_list: Incomplete | None = None, fetch_info: Incomplete | None = None, print_period: int = 100, fetch_handler: Incomplete | None = None): ...
    def start_heter_trainer(self, program: Incomplete | None = None, scope: Incomplete | None = None, debug: bool = False, fetch_list: Incomplete | None = None, fetch_info: Incomplete | None = None, print_period: int = 100, fetch_handler: Incomplete | None = None): ...
    def train_from_dataset(self, program: Incomplete | None = None, dataset: Incomplete | None = None, scope: Incomplete | None = None, thread: int = 0, debug: bool = False, fetch_list: Incomplete | None = None, fetch_info: Incomplete | None = None, print_period: int = 100, fetch_handler: Incomplete | None = None): ...
