from .checkpoint_saver import CheckpointSaver as CheckpointSaver, PaddleModel as PaddleModel, SerializableBase as SerializableBase
from _typeshed import Incomplete
from collections.abc import Generator
from paddle.base import compiler as compiler, unique_name as unique_name
from paddle.base.framework import Program as Program, in_dygraph_mode as in_dygraph_mode

g_train_epoch_range: Incomplete
g_checker: Incomplete
logger: Incomplete
generator: Incomplete
CONST_CHECKPOINT: str
CONST_MEMORYINIT: str
CONST_DACP_TYPE: str
CONST_ACP_TYPE: str
g_acp_type: Incomplete
g_program_attr: Incomplete

class AutoCheckpointChecker:
    def __init__(self) -> None: ...
    def get_range_checkpoint_path(self, name): ...
    def get_exe_checkpoint_path(self, name): ...
    def get_job_path(self): ...
    @property
    def save_checkpoint_inter(self): ...
    def valid(self): ...
    @property
    def trainer_id(self): ...
    @property
    def run_env(self): ...
    @property
    def platform(self): ...
    @property
    def job_id(self): ...
    @property
    def hdfs_home(self): ...
    @property
    def hdfs_name(self): ...
    @property
    def ce_test(self): ...
    @property
    def hdfs_ugi(self): ...
    @property
    def hdfs_checkpoint_path(self): ...
    @staticmethod
    def generate_range_name(): ...

class ExeTrainStatus(SerializableBase):
    def __init__(self) -> None: ...
    def __eq__(self, t): ...
    def __ne__(self, t): ...
    def serialize(self, path) -> None: ...
    def deserialize(self, path) -> None: ...

class TrainEpochRange(SerializableBase):
    def __init__(self, max_epoch_num, name, checkpoint_inter: Incomplete | None = None, restored: bool = True) -> None: ...
    @property
    def name(self): ...
    def serialize(self, path) -> None: ...
    @property
    def restored_from(self): ...
    def deserialize(self, path) -> None: ...
    def next(self) -> Generator[Incomplete]: ...
    def get(self): ...
    def save_checkpoint(self) -> None: ...

def train_epoch_range(max_epoch_num, save_checkpoint_inter: Incomplete | None = None) -> Generator[Incomplete]: ...
