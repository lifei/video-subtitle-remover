from _typeshed import Incomplete
from paddle.base import framework as framework
from paddle.incubate.autograd import primapi as primapi, utils as utils

def vjp(func, xs, v: Incomplete | None = None): ...
def jvp(func, xs, v: Incomplete | None = None): ...

class Jacobian:
    def __init__(self, func, xs, is_batched: bool = False) -> None: ...
    def __getitem__(self, indexes): ...
    @property
    def shape(self): ...

class Hessian:
    symbolic: Incomplete
    def __init__(self, func, xs, is_batched: bool = False) -> None: ...
    def __getitem__(self, indexes): ...
    @property
    def shape(self): ...

class _Jacobian:
    def __init__(self, func, xs) -> None: ...
    @property
    def shape(self) -> None: ...
    def __getitem__(self, indexes): ...

class _JacobianNoBatch(_Jacobian):
    def __init__(self, func, xs) -> None: ...
    @property
    def shape(self): ...

class _JacobianBatchFirst(_Jacobian):
    def __init__(self, func, xs) -> None: ...
    @property
    def shape(self): ...
