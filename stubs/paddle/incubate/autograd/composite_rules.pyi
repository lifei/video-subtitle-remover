from .primitives import *
from .primreg import REGISTER_COMPOSITE as REGISTER_COMPOSITE, lookup_composite as lookup_composite
from _typeshed import Incomplete
from paddle.base import core as core

def softmax_composite(x, axis): ...
def composite_batchnorm(x, run_mean, run_var, scale, bias, is_test, momentum, epsilon, data_layout, use_global_stats, trainable_statistics): ...
def layernorm_composite(x, scale, bias, epsilon, begin_norm_axis): ...
def instancenorm_composite(x, scale, bias, epsilon): ...
def gelu_composite(x, approximate): ...
def mean_composite(x, axis, keepdim): ...
def expand_v2_composite(x, shape): ...
def expand_as_v2_composite(x, y, target_shape): ...
def stack_composite(x, axis): ...
def flatten_contiguous_range_composite(x, start_axis, stop_axis): ...
def dropout_composite(x, seed_tensor, p, is_test, mode, seed, fix_seed): ...
def bernoulli(shape, dtype, p, seed: int = 0): ...
def hard_swish_composite(x): ...
def index_select_composite(x, index, axis): ...
def sigmoid_composite(x): ...
def silu_composite(x): ...
def meshgrid_composite(inputs): ...
def fill_any_like(x, fill_value, dtype, place: Incomplete | None = None): ...
def squeeze2_composite(x, axis): ...
def sqrt_composite(x): ...
def pow_composite(x, y): ...
def relu_composite(x): ...
def unsqueeze_composite(x, axis): ...
def rsqrt_composite(x): ...
def group_norm_composite(x, scale, bias, epsilon, groups, data_layout): ...
def sum_composite(x): ...
def leaky_relu_composite(x, negative_slope): ...
