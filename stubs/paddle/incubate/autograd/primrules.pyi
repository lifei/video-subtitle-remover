from . import primops as primops
from .primops import add as add, bernoulli as bernoulli, broadcast as broadcast, concat as concat, cos as cos, div as div, eq as eq, erf as erf, exp as exp, fill_const as fill_const, gather as gather, ge as ge, gt as gt, log as log, matmul as matmul, mul as mul, ne as ne, neg as neg, reduce_sum as reduce_sum, reshape as reshape, rsqrt as rsqrt, scatter_add as scatter_add, select as select, set_value as set_value, sin as sin, slice_assign as slice_assign, slice_select as slice_select, split as split, sqrt as sqrt, sub as sub, tanh as tanh, transpose as transpose, uniform_random as uniform_random
from .primreg import REGISTER_JVP as REGISTER_JVP, REGISTER_ORIG2PRIM as REGISTER_ORIG2PRIM, REGISTER_PRIM2ORIG as REGISTER_PRIM2ORIG, REGISTER_TRANSPOSE as REGISTER_TRANSPOSE, lookup_fn as lookup_fn, lookup_jvp as lookup_jvp, lookup_orig2prim as lookup_orig2prim, lookup_prim2orig as lookup_prim2orig, lookup_transpose as lookup_transpose, op_position_inputs as op_position_inputs, op_position_output as op_position_output
from .utils import INT_DTYPE_2_STRING as INT_DTYPE_2_STRING, get_output_var_list as get_output_var_list
from _typeshed import Incomplete

def linear_jvp(op, *args, **kwargs): ...
def elementwise_add_orig2prim(op, x, y): ...
def elementwise_sub_orig2prim(op, x, y): ...
def elementwise_mul_orig2prim(op, x, y): ...
def elementwise_div_orig2prim(op, x, y): ...
def tanh_orig2prim(op, x): ...
def sin_orig2prim(op, x): ...
def cos_orig2prim(op, x): ...
def exp_orig2prim(op, x): ...
def erf_orig2prim(op, x): ...
def abs_orig2prim(op, x): ...
def log_orig2prim(op, x): ...
def fill_zeros_like_orig2prim(op, x): ...
def fill_any_like_orig2prim(op, x): ...
def fill_const_orig2prim(op, shape_tensor: Incomplete | None = None, shape_tensor_list: Incomplete | None = None, value_tensor: Incomplete | None = None): ...
def sum_orig2prim(op, xs): ...
def index_select_orig2prim(op, index_t, x): ...
def scale_orig2prim(op, scale_t, x): ...
def assign_orig2prim(op, x): ...
def sqrt_orig2prim(op, x): ...
def rsqrt_orig2prim(op, x): ...
def matmul_v2_orig2prim(op, x, y): ...
def reshape2_orig2prim(op, shape_t, shape_tl, x): ...
def concat_orig2prim(op, axis_t, xs): ...
def slice_orig2prim(op, ends_t, ends_tl, x, starts_t, starts_tl): ...
def sigmoid_orig2prim(op, x): ...
def p_norm_orig2prim(op, x): ...
def cast_orig2prim(op, x): ...
def select_orig2prim(op, condition, x, y): ...
def equal_orig2prim(op, x, y): ...
def ne_orig2prim(op, x, y): ...
def gt_orig2prim(op, x, y): ...
def ge_orig2prim(op, x, y): ...
def elementwise_pow_orig2prim(op, x, y): ...
def pow_orig2prim(op, x, y): ...
def square_orig2prim(op, x): ...
def elementwise_max_orig2prim(op, x, y): ...
def gelu_orig2prim(op, x): ...
def dropout_orig2prim(op, seed_t, x): ...
def uniform_random_orig2prim(op, shape_t, shape_tl): ...
def reduce_sum_orig2prim(op, x): ...
def reduce_mean_orig2prim(op, x): ...
def batch_norm_orig2prim(op, bias, run_mean, momentum_tensor, scale, run_var, x): ...
def size_orig2prim(op, x): ...
def add_prim2orig(op, x, y): ...
def sub_prim2orig(op, x, y): ...
def rsqrt_prim2orig(op, x): ...
def mul_prim2orig(op, x, y): ...
def div_prim2orig(op, x, y): ...
def sqrt_prim2orig(op, x): ...
def tanh_prim2orig(op, x): ...
def sin_prim2orig(op, x): ...
def cos_prim2orig(op, x): ...
def exp_prim2orig(op, x): ...
def erf_prim2orig(op, x): ...
def abs_prim2orig(op, x): ...
def log_prim2orig(op, x): ...
def reshape_prim2orig(op, x): ...
def broadcast_prim2orig(op, x): ...
def transpose_prim2orig(op, x): ...
def split_prim2orig(op, x): ...
def concat_prim2orig(op, xs): ...
def reduce_prim2orig(op, x): ...
def matmul_prim2orig(op, x, y): ...
def slice_select_prim2orig(op, x): ...
def slice_assign_prim2orig(op, x, y): ...
def gather_prim2orig(op, index_t, x): ...
def scatter_add_prim2orig(op, index_t, x, y): ...
def fill_constant_prim2orig(op): ...
def bernoulli_prim2orig(op): ...
def uniform_random_prim2orig(op): ...
def select_prim2orig(op, condition, x, y): ...
def eq_prim2orig(op, x, y): ...
def gt_prim2orig(op, x, y): ...
def ge_prim2orig(op, x, y): ...
def ne_prim2orig(op, x, y): ...
def pow_prim2orig(op, x, y): ...
def max_prim2orig(op, x, y): ...
def cast_prim2orig(op, x): ...
def add_jvp(op, x_dot, y_dot): ...
def sub_jvp(op, x_dot, y_dot): ...
def mul_jvp(op, x_dot, y_dot): ...
def div_jvp(op, x_dot, y_dot): ...
def sqrt_jvp(op, x_dot): ...
def tanh_jvp(op, x_dot): ...
def sin_jvp(op, x_dot): ...
def cos_jvp(op, x_dot): ...
def exp_jvp(op, x_dot): ...
def erf_jvp(op, x_dot): ...
def abs_jvp(op, x_dot): ...
def log_jvp(op, x_dot): ...
def reshape_jvp(op, x_dot): ...
def broadcast_jvp(op, x_dot): ...
def transpose_jvp(op, x_dot): ...
def split_jvp(op, x_dot): ...
def concat_jvp(op, xs_dot): ...
def reduce_sum_jvp(op, x_dot): ...
def matmul_jvp(op, x_dot, y_dot): ...
def slice_select_jvp(op, x_dot): ...
def slice_assign_jvp(op, x_dot, y_dot): ...
def gather_jvp(op, x_dot, indextensor): ...
def scatter_add_jvp(op, x_dot, y_dot): ...
def select_jvp(op, cond_dot, x_dot, y_dot): ...
def eq_jvp(op, x_dot, y_dot): ...
def gt_jvp(op, x_dot, y_dot): ...
def ge_jvp(op, x_dot, y_dot): ...
def ne_jvp(op, x_dot, y_dot): ...
def pow_jvp(op, x_dot, y_dot): ...
def max_jvp(op, x_dot, y_dot): ...
def cast_jvp(op, x_dot): ...
def rsqrt_jvp(op, x_dot): ...
def add_transpose(op, check_dot, z_bar): ...
def sub_transpose(op, check_dot, z_bar): ...
def mul_transpose(op, check_dot, z_bar): ...
def div_transpose(op, check_dot, z_bar): ...
def reshape_transpose(op, check_dot, y_bar): ...
def broadcast_transpose(op, check_dot, y_bar): ...
def transpose_transpose(op, check_dot, y_bar): ...
def split_transpose(op, check_dot, ys_bar): ...
def concat_transpose(op, check_dot, y_bar): ...
def reduce_sum_transpose(op, check_dot, y_bar): ...
def matmul_transpose(op, check_dot, z_bar): ...
def slice_select_transpose(op, check_dot, y_bar): ...
def slice_assign_transpose(op, check_dot, z_bar): ...
def gather_transpose(op, check_dot, y_bar): ...
def scatter_add_transpose(op, check_dot, z_bar): ...
def select_transpose(op, check_dot, z_bar): ...
def cast_transpose(op, check_dot, y_bar): ...
