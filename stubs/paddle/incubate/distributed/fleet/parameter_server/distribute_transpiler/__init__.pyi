from _typeshed import Incomplete
from paddle.base.compiler import CompiledProgram as CompiledProgram
from paddle.distributed.fleet.base.private_helper_function import wait_server_ready as wait_server_ready
from paddle.distributed.transpiler.distribute_transpiler import DistributeTranspilerConfig as DistributeTranspilerConfig
from paddle.framework import core as core
from paddle.incubate.distributed.fleet.base import DistributedOptimizer as DistributedOptimizer, Fleet as Fleet, Mode as Mode
from paddle.incubate.distributed.fleet.parameter_server import version as version
from paddle.incubate.distributed.fleet.parameter_server.distribute_transpiler.distributed_strategy import AsyncStrategy as AsyncStrategy, DistributedStrategy as DistributedStrategy, GeoStrategy as GeoStrategy, HalfAsyncStrategy as HalfAsyncStrategy, StrategyFactory as StrategyFactory, SyncStrategy as SyncStrategy, TrainerRuntimeConfig as TrainerRuntimeConfig
from paddle.incubate.distributed.fleet.parameter_server.ir import public as public
from paddle.incubate.distributed.fleet.parameter_server.ir.public import get_sparse_tablenames as get_sparse_tablenames
from paddle.incubate.distributed.fleet.parameter_server.mode import PSMode as PSMode
from paddle.incubate.distributed.fleet.parameter_server.pslib.optimizer_factory import DistributedAdam as DistributedAdam
from paddle.incubate.distributed.fleet.role_maker import MPISymetricRoleMaker as MPISymetricRoleMaker
from paddle.static import Executor as Executor, Program as Program, default_main_program as default_main_program, default_startup_program as default_startup_program

class FleetTranspiler(Fleet):
    startup_program: Incomplete
    main_program: Incomplete
    def __init__(self) -> None: ...
    def init(self, role_maker: Incomplete | None = None) -> None: ...
    def init_worker(self) -> None: ...
    def init_server(self, model_dir: Incomplete | None = None, **kwargs) -> None: ...
    def run_server(self) -> None: ...
    def stop_worker(self) -> None: ...
    def distributed_optimizer(self, optimizer, strategy: Incomplete | None = None): ...
    def save_inference_model(self, executor, dirname, feeded_var_names, target_vars, main_program: Incomplete | None = None, export_for_deployment: bool = True, legacy_format: bool = False) -> None: ...
    def save_persistables(self, executor, dirname, main_program: Incomplete | None = None, **kwargs) -> None: ...

fleet: Incomplete

class ParameterServerOptimizer(DistributedOptimizer):
    type: str
    data_norm_name: Incomplete
    def __init__(self, optimizer, strategy, mode=...) -> None: ...
    def backward(self, loss, startup_program: Incomplete | None = None, parameter_list: Incomplete | None = None, no_grad_set: Incomplete | None = None, callbacks: Incomplete | None = None) -> None: ...
    def apply_gradients(self, params_grads) -> None: ...
    def minimize(self, losses, scopes: Incomplete | None = None, startup_programs: Incomplete | None = None, parameter_list: Incomplete | None = None, no_grad_set: Incomplete | None = None) -> None: ...
