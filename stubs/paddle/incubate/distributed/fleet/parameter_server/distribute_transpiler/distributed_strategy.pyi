from _typeshed import Incomplete
from paddle import base as base
from paddle.distributed.transpiler.distribute_transpiler import DistributeTranspilerConfig as DistributeTranspilerConfig, ServerRuntimeConfig as ServerRuntimeConfig
from paddle.incubate.distributed.fleet.parameter_server.mode import DistributedMode as DistributedMode

class TrainerRuntimeConfig:
    mode: Incomplete
    runtime_configs: Incomplete
    def __init__(self) -> None: ...
    def get_communicator_flags(self): ...
    def display(self, configs): ...

class PSLibRuntimeConfig:
    runtime_configs: Incomplete
    def __init__(self) -> None: ...
    def get_runtime_configs(self): ...

class DistributedStrategy:
    debug_opt: Incomplete
    use_ps_gpu: bool
    def __init__(self) -> None: ...
    def set_debug_opt(self, opt_info) -> None: ...
    def get_debug_opt(self): ...
    def get_program_config(self): ...
    def set_program_config(self, config) -> None: ...
    def check_program_config(self) -> None: ...
    def get_trainer_runtime_config(self): ...
    def set_trainer_runtime_config(self, config) -> None: ...
    def check_trainer_runtime_config(self) -> None: ...
    def get_pslib_runtime_config(self): ...
    def set_pslib_runtime_config(self, config) -> None: ...
    def get_server_runtime_config(self): ...
    def set_server_runtime_config(self, config) -> None: ...
    def check_server_runtime_config(self) -> None: ...
    def get_execute_strategy(self): ...
    def set_execute_strategy(self, config) -> None: ...
    def check_execute_strategy(self) -> None: ...
    def get_build_strategy(self): ...
    def set_build_strategy(self, config) -> None: ...
    def check_build_strategy(self) -> None: ...

class SyncStrategy(DistributedStrategy):
    def __init__(self) -> None: ...
    def check_trainer_runtime_config(self) -> None: ...
    def check_program_config(self) -> None: ...
    def check_server_runtime_config(self) -> None: ...
    def check_execute_strategy(self) -> None: ...
    def check_build_strategy(self) -> None: ...

class AsyncStrategy(DistributedStrategy):
    def __init__(self) -> None: ...
    def check_trainer_runtime_config(self) -> None: ...
    def check_program_config(self) -> None: ...
    def check_server_runtime_config(self) -> None: ...
    def check_execute_strategy(self) -> None: ...
    def check_build_strategy(self) -> None: ...

class HalfAsyncStrategy(DistributedStrategy):
    def __init__(self) -> None: ...
    def check_trainer_runtime_config(self) -> None: ...
    def check_program_config(self) -> None: ...
    def check_server_runtime_config(self) -> None: ...
    def check_execute_strategy(self) -> None: ...
    def check_build_strategy(self) -> None: ...

class GeoStrategy(DistributedStrategy):
    def __init__(self, update_frequency: int = 100) -> None: ...
    def check_program_config(self) -> None: ...
    def check_trainer_runtime_config(self) -> None: ...
    def check_server_runtime_config(self) -> None: ...
    def check_execute_strategy(self) -> None: ...
    def check_build_strategy(self) -> None: ...

class StrategyFactory:
    @staticmethod
    def create_sync_strategy(): ...
    @staticmethod
    def create_half_async_strategy(): ...
    @staticmethod
    def create_async_strategy(): ...
    @staticmethod
    def create_geo_strategy(update_frequency: int = 100): ...
