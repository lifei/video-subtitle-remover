from .supported_layer_list import supported_layers_and_prune_func_map as supported_layers_and_prune_func_map
from .utils import MaskAlgo as MaskAlgo
from _typeshed import Incomplete
from paddle.base import core as core, global_scope as global_scope, program_guard as program_guard
from paddle.base.framework import dygraph_only as dygraph_only

OpRole: Incomplete
OP_ROLE_KEY: Incomplete

def set_excluded_layers(param_names, main_program: Incomplete | None = None) -> None: ...
def reset_excluded_layers(main_program: Incomplete | None = None) -> None: ...
def decorate(optimizer): ...
def prune_model(model, n: int = 2, m: int = 4, mask_algo: str = 'mask_1d', with_mask: bool = True): ...

class ProgramASPInfo:
    def __init__(self) -> None: ...
    def update_mask_vars(self, param_name, var) -> None: ...
    def update_masks(self, param_name, var) -> None: ...
    def update_excluded_layers(self, param_names) -> None: ...
    def reset_excluded_layers(self) -> None: ...
    @property
    def mask_vars(self): ...
    @property
    def masks(self): ...
    @property
    def excluded_layers(self): ...

class ASPHelper:
    MASK_APPENDDED_NAME: str
    PADDLE_WEIGHT_SUFFIX: str
    @classmethod
    def set_excluded_layers(cls, param_names, main_program) -> None: ...
    @classmethod
    def reset_excluded_layers(cls, main_program: Incomplete | None = None) -> None: ...
    @staticmethod
    def decorate(optimizer): ...
    @classmethod
    def prune_model_by_program(cls, place, main_program: Incomplete | None = None, n: int = 2, m: int = 4, mask_algo=..., with_mask: bool = True): ...
    @classmethod
    def prune_model_by_layer(cls, place, layer, n: int = 2, m: int = 4, mask_algo=..., with_mask: bool = True): ...

class OptimizerWithSparsityGuarantee:
    def __init__(self, optimizer) -> None: ...
    def __getattr__(self, item): ...
    def minimize(self, loss, startup_program: Incomplete | None = None, parameter_list: Incomplete | None = None, no_grad_set: Incomplete | None = None): ...
    def step(self) -> None: ...
    def state_dict(self): ...
    def set_state_dict(self, state_dict): ...
