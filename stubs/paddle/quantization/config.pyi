from .factory import QuanterFactory as QuanterFactory
from .wrapper import ObserveWrapper as ObserveWrapper
from _typeshed import Incomplete
from paddle import nn as nn
from paddle.nn import Layer as Layer

DEFAULT_QAT_LAYER_MAPPINGS: dict[Layer, Layer]
DEFAULT_LEAVES: Incomplete

class SingleLayerConfig:
    def __init__(self, activation: QuanterFactory, weight: QuanterFactory) -> None: ...
    @property
    def activation(self): ...
    @property
    def weight(self): ...

class QuantConfig:
    def __init__(self, activation: QuanterFactory, weight: QuanterFactory) -> None: ...
    def add_layer_config(self, layer: Layer | list, activation: QuanterFactory = None, weight: QuanterFactory = None): ...
    def add_name_config(self, layer_name: str | list, activation: QuanterFactory = None, weight: QuanterFactory = None): ...
    def add_type_config(self, layer_type: type | list, activation: QuanterFactory = None, weight: QuanterFactory = None): ...
    def add_qat_layer_mapping(self, source: type, target: type): ...
    def add_customized_leaf(self, layer_type: type): ...
    @property
    def customized_leaves(self): ...
    @property
    def qat_layer_mappings(self): ...
    @property
    def default_qat_layer_mapping(self): ...
    @property
    def global_config(self) -> SingleLayerConfig: ...
    def details(self) -> str: ...
