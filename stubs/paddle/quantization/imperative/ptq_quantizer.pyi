import abc
from . import utils as utils
from ...static.quantization.cal_kl_threshold import cal_kl_threshold as cal_kl_threshold
from _typeshed import Incomplete

def abs_max_value(tensor): ...
def merge_max_value(old, new): ...
def combine_abs_max_and_hist(tensor, origin_max, origin_hist, bins, upsample_bins): ...

class BaseQuantizer(metaclass=abc.ABCMeta):
    quant_bits: Incomplete
    abs_max_vals: Incomplete
    thresholds: Incomplete
    def __init__(self, quant_bits: int = 8) -> None: ...
    @abc.abstractmethod
    def sample_data(self, layer, tensors): ...
    @abc.abstractmethod
    def cal_thresholds(self): ...

class AbsmaxQuantizer(BaseQuantizer):
    def __init__(self, quant_bits: int = 8) -> None: ...
    abs_max_vals: Incomplete
    def sample_data(self, layer, tensors) -> None: ...
    thresholds: Incomplete
    def cal_thresholds(self) -> None: ...

class PerChannelAbsmaxQuantizer(BaseQuantizer):
    def __init__(self, quant_bits: int = 8) -> None: ...
    abs_max_vals: Incomplete
    def sample_data(self, layer, tensors) -> None: ...
    thresholds: Incomplete
    def cal_thresholds(self) -> None: ...

class BaseHistQuantizer(BaseQuantizer, metaclass=abc.ABCMeta):
    bins: Incomplete
    upsample_bins: Incomplete
    hists: Incomplete
    def __init__(self, quant_bits: int = 8, bins: int = 1024, upsample_bins: int = 64) -> None: ...
    abs_max_vals: Incomplete
    def sample_data(self, layer, tensors) -> None: ...
    @abc.abstractmethod
    def cal_thresholds(self): ...

class HistQuantizer(BaseHistQuantizer):
    hist_percent: Incomplete
    def __init__(self, quant_bits: int = 8, bins: int = 1024, upsample_bins: int = 64, hist_percent: float = 0.99999) -> None: ...
    def cal_thresholds(self): ...

class KLQuantizer(BaseHistQuantizer):
    def __init__(self, quant_bits: int = 8, bins: int = 1024, upsample_bins: int = 64) -> None: ...
    def cal_thresholds(self) -> None: ...

SUPPORT_ACT_QUANTIZERS: Incomplete
SUPPORT_WT_QUANTIZERS: Incomplete
