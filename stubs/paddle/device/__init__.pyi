from _typeshed import Incomplete
from paddle.base.framework import is_compiled_with_cinn as is_compiled_with_cinn, is_compiled_with_cuda as is_compiled_with_cuda, is_compiled_with_distribute as is_compiled_with_distribute, is_compiled_with_rocm as is_compiled_with_rocm

__all__ = ['get_cudnn_version', 'set_device', 'get_device', 'XPUPlace', 'IPUPlace', 'is_compiled_with_xpu', 'is_compiled_with_ipu', 'is_compiled_with_cinn', 'is_compiled_with_cuda', 'is_compiled_with_rocm', 'is_compiled_with_distribute', 'is_compiled_with_custom_device', 'get_all_device_type', 'get_all_custom_device_type', 'get_available_device', 'get_available_custom_device', 'Stream', 'Event', 'current_stream', 'set_stream', 'stream_guard', 'synchronize']

def is_compiled_with_custom_device(device_type): ...
def is_compiled_with_ipu(): ...
def IPUPlace(): ...
def is_compiled_with_xpu(): ...
def XPUPlace(dev_id): ...
def get_cudnn_version(): ...
def set_device(device): ...
def get_device(): ...
def get_all_device_type(): ...
def get_all_custom_device_type(): ...
def get_available_device(): ...
def get_available_custom_device(): ...

class Event:
    device: Incomplete
    event_base: Incomplete
    def __init__(self, device: Incomplete | None = None, enable_timing: bool = False, blocking: bool = False, interprocess: bool = False) -> None: ...
    def record(self, stream: Incomplete | None = None) -> None: ...
    def query(self): ...
    def elapsed_time(self, end_event): ...
    def synchronize(self) -> None: ...

class Stream:
    stream_base: Incomplete
    device: Incomplete
    def __init__(self, device: Incomplete | None = None, priority: int = 2, stream_base: Incomplete | None = None) -> None: ...
    def wait_event(self, event) -> None: ...
    def wait_stream(self, stream) -> None: ...
    def record_event(self, event: Incomplete | None = None): ...
    def query(self): ...
    def synchronize(self) -> None: ...
    def __eq__(self, o): ...
    def __hash__(self): ...

def current_stream(device: Incomplete | None = None): ...
def set_stream(stream): ...

class stream_guard:
    stream: Incomplete
    def __init__(self, stream: Incomplete | None = None) -> None: ...
    src_prev_stream: Incomplete
    tmp_place: Incomplete
    dst_prev_stream: Incomplete
    def __enter__(self) -> None: ...
    def __exit__(self, *args) -> None: ...

def synchronize(device: Incomplete | None = None) -> None: ...
