from . import gast as gast
from .astn import AstToGAst as AstToGAst, GAstToAst as GAstToAst

class Ast3ToGAst(AstToGAst):
    def visit_ExtSlice(self, node): ...
    def visit_Index(self, node): ...
    def visit_Module(self, node): ...
    def visit_Num(self, node): ...
    def visit_Ellipsis(self, node): ...
    def visit_Str(self, node): ...
    def visit_Bytes(self, node): ...
    def visit_FunctionDef(self, node): ...
    def visit_AsyncFunctionDef(self, node): ...
    def visit_For(self, node): ...
    def visit_AsyncFor(self, node): ...
    def visit_With(self, node): ...
    def visit_AsyncWith(self, node): ...
    def visit_Call(self, node): ...
    def visit_NameConstant(self, node): ...
    def visit_arguments(self, node): ...
    def visit_Name(self, node): ...
    def visit_arg(self, node): ...
    def visit_ExceptHandler(self, node): ...
    def visit_comprehension(self, node): ...

class GAstToAst3(GAstToAst):
    def visit_Subscript(self, node): ...
    def visit_Module(self, node): ...
    def visit_Constant(self, node): ...
    def visit_Name(self, node): ...
    def visit_ExceptHandler(self, node): ...
    def visit_Call(self, node): ...
    def visit_ClassDef(self, node): ...
    def visit_FunctionDef(self, node): ...
    def visit_AsyncFunctionDef(self, node): ...
    def visit_For(self, node): ...
    def visit_AsyncFor(self, node): ...
    def visit_With(self, node): ...
    def visit_AsyncWith(self, node): ...
    def visit_Call(self, node): ...
    def visit_arguments(self, node): ...

def ast_to_gast(node): ...
def gast_to_ast(node): ...
