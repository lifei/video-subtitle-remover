from _typeshed import Incomplete
from typing import Generic, TypeVar

T = TypeVar('T')

class EnvironmentVariable(Generic[T]):
    name: str
    default: T
    def __init__(self, name: str, default: T) -> None: ...
    def get(self) -> T: ...
    def set(self, value: T) -> None: ...
    def delete(self) -> None: ...

class StringEnvironmentVariable(EnvironmentVariable[str]):
    def __init__(self, name: str, default: str) -> None: ...
    def get(self) -> str: ...
    def set(self, value: str) -> None: ...

class BooleanEnvironmentVariable(EnvironmentVariable[bool]):
    BOOLEAN_IS_SET: Incomplete
    def __init__(self, name: str, default: bool) -> None: ...
    def get(self) -> bool: ...
    def set(self, value: bool) -> None: ...

class IntegerEnvironmentVariable(EnvironmentVariable[int]):
    def __init__(self, name: str, default: int) -> None: ...
    def get(self) -> int: ...
    def set(self, value: int) -> None: ...

class EnvironmentVariableGuard(Generic[T]):
    variable: EnvironmentVariable[T]
    original_value: T
    def __init__(self, variable: EnvironmentVariable[T], value: T) -> None: ...
    def __enter__(self) -> EnvironmentVariableGuard: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
