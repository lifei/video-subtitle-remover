from ...base import core as core
from .extension_utils import CLANG_COMPILE_FLAGS as CLANG_COMPILE_FLAGS, CLANG_LINK_FLAGS as CLANG_LINK_FLAGS, CustomOpInfo as CustomOpInfo, IS_WINDOWS as IS_WINDOWS, MSVC_COMPILE_FLAGS as MSVC_COMPILE_FLAGS, OS_NAME as OS_NAME, add_compile_flag as add_compile_flag, add_std_without_repeat as add_std_without_repeat, bootstrap_context as bootstrap_context, check_abi_compatibility as check_abi_compatibility, clean_object_if_change_cflags as clean_object_if_change_cflags, find_cuda_home as find_cuda_home, find_rocm_home as find_rocm_home, get_build_directory as get_build_directory, is_cuda_file as is_cuda_file, log_v as log_v, normalize_extension_kwargs as normalize_extension_kwargs, parse_op_name_from as parse_op_name_from, prepare_unix_cudaflags as prepare_unix_cudaflags, prepare_win_cudaflags as prepare_win_cudaflags
from _typeshed import Incomplete
from distutils.command.build import build
from setuptools.command.build_ext import build_ext
from setuptools.command.easy_install import easy_install

CUDA_HOME: Incomplete
ROCM_HOME: Incomplete
CUDA_HOME = ROCM_HOME

def setup(**attr) -> None: ...
def CppExtension(sources, *args, **kwargs): ...
def CUDAExtension(sources, *args, **kwargs): ...

class BuildExtension(build_ext):
    @classmethod
    def with_options(cls, **options): ...
    no_python_abi_suffix: Incomplete
    output_dir: Incomplete
    contain_cuda_file: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def initialize_options(self) -> None: ...
    build_lib: Incomplete
    def finalize_options(self) -> None: ...
    cflags: Incomplete
    def build_extensions(self): ...
    def get_ext_filename(self, fullname): ...

class EasyInstallCommand(easy_install):
    def __init__(self, *args, **kwargs) -> None: ...
    def run(self, *args, **kwargs) -> None: ...

class BuildCommand(build):
    @classmethod
    def with_options(cls, **options): ...
    def __init__(self, *args, **kwargs) -> None: ...
    build_base: Incomplete
    def initialize_options(self) -> None: ...

def load(name, sources, extra_cxx_cflags: Incomplete | None = None, extra_cuda_cflags: Incomplete | None = None, extra_ldflags: Incomplete | None = None, extra_include_paths: Incomplete | None = None, extra_library_paths: Incomplete | None = None, build_directory: Incomplete | None = None, verbose: bool = False): ...
