from ...base import core as core
from ...base.framework import OpProtoHolder as OpProtoHolder
from ...sysconfig import get_include as get_include, get_lib as get_lib
from _typeshed import Incomplete
from collections.abc import Generator
from typing import NamedTuple

logger: Incomplete
formatter: Incomplete
ch: Incomplete
OS_NAME: Incomplete
IS_WINDOWS: Incomplete
MSVC_COMPILE_FLAGS: Incomplete
CLANG_COMPILE_FLAGS: Incomplete
CLANG_LINK_FLAGS: Incomplete
MSVC_LINK_FLAGS: Incomplete
COMMON_HIPCC_FLAGS: Incomplete
COMMON_NVCC_FLAGS: Incomplete
GCC_MINI_VERSION: Incomplete
MSVC_MINI_VERSION: Incomplete
WRONG_COMPILER_WARNING: str
ABI_INCOMPATIBILITY_WARNING: str
DEFAULT_OP_ATTR_NAMES: Incomplete

def bootstrap_context() -> Generator[None]: ...
def load_op_meta_info_and_register_op(lib_filename): ...
def custom_write_stub(resource, pyfile) -> None: ...

class OpInfo(NamedTuple):
    so_name: Incomplete
    so_path: Incomplete

class CustomOpInfo:
    @classmethod
    def instance(cls): ...
    op_info_map: Incomplete
    def __init__(self) -> None: ...
    def add(self, op_name, so_name, so_path: Incomplete | None = None) -> None: ...
    def last(self): ...
    def empty(self): ...

class VersionFields(NamedTuple):
    sources: Incomplete
    extra_compile_args: Incomplete
    extra_link_args: Incomplete
    library_dirs: Incomplete
    runtime_library_dirs: Incomplete
    include_dirs: Incomplete
    define_macros: Incomplete
    undef_macros: Incomplete

class VersionManager:
    version_field: Incomplete
    version: Incomplete
    def __init__(self, version_field) -> None: ...
    def hasher(self, version_field): ...
    @property
    def details(self): ...

def combine_hash(md5, value): ...
def clean_object_if_change_cflags(so_path, extension): ...
def prepare_unix_cudaflags(cflags): ...
def prepare_win_cudaflags(cflags): ...
def add_std_without_repeat(cflags, compiler_type, use_std14: bool = False) -> None: ...
def get_cuda_arch_flags(cflags): ...
def get_rocm_arch_flags(cflags): ...
def normalize_extension_kwargs(kwargs, use_cuda: bool = False): ...
def create_sym_link_if_not_exist(): ...
def find_cuda_home(): ...
def find_rocm_home(): ...
def find_cuda_includes(): ...
def find_rocm_includes(): ...
def find_paddle_includes(use_cuda: bool = False): ...
def find_python_includes(): ...
def find_clang_cpp_include(compiler: str = 'clang'): ...
def find_cuda_libraries(): ...
def find_rocm_libraries(): ...
def find_paddle_libraries(use_cuda: bool = False): ...
def add_compile_flag(extra_compile_args, flags) -> None: ...
def is_cuda_file(path): ...
def get_build_directory(verbose: bool = False): ...
def parse_op_info(op_name): ...
def list2str(args): ...
def parse_op_name_from(sources): ...
def run_cmd(command, verbose: bool = False): ...
def check_abi_compatibility(compiler, verbose: bool = False): ...
def log_v(info, verbose: bool = True) -> None: ...
