from ...base.framework import IrNode as IrNode, Operator as Operator
from .quant_config import SUPPORT_QUANTIZATION_OP_DICT as SUPPORT_QUANTIZATION_OP_DICT
from _typeshed import Incomplete

def load_variable_data(scope, var_name): ...
def set_variable_data(scope, place, var_name, np_value) -> None: ...
def quant_tensor(x, scale, quant_axis: int = 0, weight_bits: int = 8, onnx_format: bool = False): ...
def dequant_tensor(x, scale, quant_axis: int = 0, weight_bits: int = 8): ...
def bias_correction_w(x, x_quant, scale_v, quant_axis, weight_bits: int = 8): ...
def stable_sigmoid(x): ...
def calculate_quant_cos_error(orig_tensor, qdq_tensor): ...
def move_persistable_var_to_global_block(program) -> None: ...
def l2_loss(gt, pred): ...

class tqdm:
    total: Incomplete
    bar_format: Incomplete
    ncols: Incomplete
    n: int
    def __init__(self, total, bar_format: str = 'Loading|{bar}', ncols: int = 80) -> None: ...
    def update(self, n: int = 1) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...
