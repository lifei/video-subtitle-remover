from _typeshed import Incomplete
from paddle.base import Variable as Variable, core as core
from paddle.base.data_feeder import check_type as check_type
from paddle.base.framework import convert_np_dtype_to_dtype_ as convert_np_dtype_to_dtype_, in_pir_mode as in_pir_mode, static_only as static_only
from paddle.base.layer_helper import LayerHelper as LayerHelper
from paddle.base.libpaddle import DataType as DataType

def evaluate_flag(val) -> bool: ...
def data(name, shape, dtype: Incomplete | None = None, lod_level: int = 0): ...

class InputSpec:
    shape: Incomplete
    dtype: Incomplete
    name: Incomplete
    stop_gradient: Incomplete
    def __init__(self, shape, dtype: str = 'float32', name: Incomplete | None = None, stop_gradient: bool = False) -> None: ...
    @classmethod
    def from_tensor(cls, tensor, name: Incomplete | None = None): ...
    @classmethod
    def from_numpy(cls, ndarray, name: Incomplete | None = None): ...
    def batch(self, batch_size): ...
    def unbatch(self): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

def setitem(x, index, value): ...
