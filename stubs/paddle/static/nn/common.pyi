from _typeshed import Incomplete
from collections.abc import Generator
from paddle.base import core as core, unique_name as unique_name
from paddle.base.data_feeder import check_dtype as check_dtype
from paddle.base.framework import Program as Program, Variable as Variable, default_main_program as default_main_program, in_dygraph_mode as in_dygraph_mode, name_scope as name_scope, program_guard as program_guard, static_only as static_only
from paddle.base.layers.layer_function_generator import templatedoc as templatedoc
from paddle.base.param_attr import ParamAttr as ParamAttr
from paddle.base.wrapped_decorator import signature_safe_contextmanager as signature_safe_contextmanager
from paddle.common_ops_import import LayerHelper as LayerHelper, check_type as check_type, check_variable_and_dtype as check_variable_and_dtype
from paddle.nn.initializer import Constant as Constant, Normal as Normal

def fc(x, size, num_flatten_dims: int = 1, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, activation: Incomplete | None = None, name: Incomplete | None = None): ...
def instance_norm(input, epsilon: float = 1e-05, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, name: Incomplete | None = None): ...
def continuous_value_model(input, cvm, use_cvm: bool = True): ...
def data_norm(input, act: Incomplete | None = None, epsilon: float = 1e-05, param_attr: Incomplete | None = None, data_layout: str = 'NCHW', in_place: bool = False, name: Incomplete | None = None, moving_mean_name: Incomplete | None = None, moving_variance_name: Incomplete | None = None, do_model_average_for_mean_and_var: bool = True, slot_dim: int = -1, sync_stats: bool = False, summary_decay_rate: float = 0.9999999, enable_scale_and_shift: bool = False): ...
def group_norm(input, groups, epsilon: float = 1e-05, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, act: Incomplete | None = None, data_layout: str = 'NCHW', name: Incomplete | None = None): ...
def conv2d(input, num_filters, filter_size, stride: int = 1, padding: int = 0, dilation: int = 1, groups: Incomplete | None = None, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, use_cudnn: bool = True, act: Incomplete | None = None, name: Incomplete | None = None, data_format: str = 'NCHW'): ...
def conv3d(input, num_filters, filter_size, stride: int = 1, padding: int = 0, dilation: int = 1, groups: Incomplete | None = None, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, use_cudnn: bool = True, act: Incomplete | None = None, name: Incomplete | None = None, data_format: str = 'NCDHW'): ...
def conv2d_transpose(input, num_filters, output_size: Incomplete | None = None, filter_size: Incomplete | None = None, padding: int = 0, stride: int = 1, dilation: int = 1, groups: Incomplete | None = None, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, use_cudnn: bool = True, act: Incomplete | None = None, name: Incomplete | None = None, data_format: str = 'NCHW'): ...
def conv3d_transpose(input, num_filters, output_size: Incomplete | None = None, filter_size: Incomplete | None = None, padding: int = 0, stride: int = 1, dilation: int = 1, groups: Incomplete | None = None, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, use_cudnn: bool = True, act: Incomplete | None = None, name: Incomplete | None = None, data_format: str = 'NCDHW'): ...
def deformable_conv(input, offset, mask, num_filters, filter_size, stride: int = 1, padding: int = 0, dilation: int = 1, groups: Incomplete | None = None, deformable_groups: Incomplete | None = None, im2col_step: Incomplete | None = None, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, modulated: bool = True, name: Incomplete | None = None): ...
def deform_conv2d(x, offset, mask, num_filters, filter_size, stride: int = 1, padding: int = 0, dilation: int = 1, groups: int = 1, deformable_groups: int = 1, im2col_step: int = 1, weight_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, name: Incomplete | None = None): ...
def bilinear_tensor_product(x, y, size, act: Incomplete | None = None, name: Incomplete | None = None, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None): ...
def batch_norm(input, act: Incomplete | None = None, is_test: bool = False, momentum: float = 0.9, epsilon: float = 1e-05, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, data_layout: str = 'NCHW', in_place: bool = False, name: Incomplete | None = None, moving_mean_name: Incomplete | None = None, moving_variance_name: Incomplete | None = None, do_model_average_for_mean_and_var: bool = True, use_global_stats: bool = False): ...
def prelu(x, mode, param_attr: Incomplete | None = None, data_format: str = 'NCHW', name: Incomplete | None = None): ...

class PyFuncRegistry:
    def __init__(self, func) -> None: ...
    @classmethod
    def registered_func(cls, idx): ...
    @classmethod
    def registered_func_num(cls): ...
    @property
    def id(self): ...
    def __call__(self, *args): ...

def py_func(func, x, out, backward_func: Incomplete | None = None, skip_vars_in_backward_input: Incomplete | None = None): ...
def row_conv(input, future_context_size, param_attr: Incomplete | None = None, act: Incomplete | None = None): ...
def spectral_norm(weight, dim: int = 0, power_iters: int = 1, eps: float = 1e-12, name: Incomplete | None = None): ...
def layer_norm(input, scale: bool = True, shift: bool = True, begin_norm_axis: int = 1, epsilon: float = 1e-05, param_attr: Incomplete | None = None, bias_attr: Incomplete | None = None, act: Incomplete | None = None, name: Incomplete | None = None): ...
def embedding(input, size, is_sparse: bool = False, is_distributed: bool = False, padding_idx: Incomplete | None = None, param_attr: Incomplete | None = None, dtype: str = 'float32'): ...
def sparse_embedding(input, size, padding_idx: Incomplete | None = None, is_test: bool = False, entry: Incomplete | None = None, table_class: str = 'MemorySparseTable', param_attr: Incomplete | None = None, dtype: str = 'float32', slot: Incomplete | None = None): ...

class ExponentialMovingAverage:
    apply_program: Incomplete
    restore_program: Incomplete
    def __init__(self, decay: float = 0.999, thres_steps: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    def update(self) -> None: ...
    def apply(self, executor, need_restore: bool = True) -> Generator[None]: ...
    def restore(self, executor) -> None: ...
